// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentinvolvementtypevalues : >  * `Payer/Debtor` - Party who holds a payment account and allows a payment order from that payment account, or, where there is no payment account, a party who gives a payment order.  * `PayeeBank/CreditorAgent` - Financial institution servicing an account for the payee.  * `Payee/Creditor` - Party who is the intended recipient of funds which have been the subject of a payment transaction.  * `PayerBank/Debtoragent` - Financial institution servicing an account for the payer.  * `Initiator` - Party initiating the payment to an agent.  * `PSU` - PSU means a natural or legal person making use of a payment service in the capacity of payer or payee; (PSD)  * `PSP` - PSP means a payment service provider falling under any of the categories referred to in Article 1(1) of Directive 2007/64/EC and the legal and natural persons referred to in Article 26 of Directive 2007/64/EC, but excludes the bodies listed in Article 2 of Directive 2006/48/EC of the European Parliament and of the Council of 14 June 2006 relating to the taking up and pursuit of the business of credit institutions ( 1 ) benefiting from a waiver under Article 2(3) of Directive 2007/64/EC; (PSD)  * `UltimateDebtor` - Ultimate party that owes an amount of money to the (ultimate) creditor.  * `UltimateCreditor` - Ultimate party to which an amount of money is due.  
type Paymentinvolvementtypevalues string

// List of Paymentinvolvementtypevalues
const (
	PAYER_DEBTOR Paymentinvolvementtypevalues = "Payer/Debtor"
	PAYEE_BANK_CREDITOR_AGENT Paymentinvolvementtypevalues = "PayeeBank/CreditorAgent"
	PAYEE_CREDITOR Paymentinvolvementtypevalues = "Payee/Creditor"
	PAYER_BANK_DEBTORAGENT Paymentinvolvementtypevalues = "PayerBank/Debtoragent"
	INITIATOR Paymentinvolvementtypevalues = "Initiator"
	PSU Paymentinvolvementtypevalues = "PSU"
	PSP Paymentinvolvementtypevalues = "PSP"
	ULTIMATE_DEBTOR Paymentinvolvementtypevalues = "UltimateDebtor"
	ULTIMATE_CREDITOR Paymentinvolvementtypevalues = "UltimateCreditor"
)

// AllowedPaymentinvolvementtypevaluesEnumValues is all the allowed values of Paymentinvolvementtypevalues enum
var AllowedPaymentinvolvementtypevaluesEnumValues = []Paymentinvolvementtypevalues{
	"Payer/Debtor",
	"PayeeBank/CreditorAgent",
	"Payee/Creditor",
	"PayerBank/Debtoragent",
	"Initiator",
	"PSU",
	"PSP",
	"UltimateDebtor",
	"UltimateCreditor",
}

// validPaymentinvolvementtypevaluesEnumValue provides a map of Paymentinvolvementtypevaluess for fast verification of use input
var validPaymentinvolvementtypevaluesEnumValues = map[Paymentinvolvementtypevalues]struct{}{
	"Payer/Debtor": {},
	"PayeeBank/CreditorAgent": {},
	"Payee/Creditor": {},
	"PayerBank/Debtoragent": {},
	"Initiator": {},
	"PSU": {},
	"PSP": {},
	"UltimateDebtor": {},
	"UltimateCreditor": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentinvolvementtypevalues) IsValid() bool {
	_, ok := validPaymentinvolvementtypevaluesEnumValues[v]
	return ok
}

// NewPaymentinvolvementtypevaluesFromValue returns a pointer to a valid Paymentinvolvementtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentinvolvementtypevaluesFromValue(v string) (Paymentinvolvementtypevalues, error) {
	ev := Paymentinvolvementtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentinvolvementtypevalues: valid values are %v", v, AllowedPaymentinvolvementtypevaluesEnumValues)
}



// AssertPaymentinvolvementtypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentinvolvementtypevaluesRequired(obj Paymentinvolvementtypevalues) error {
	return nil
}

// AssertPaymentinvolvementtypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentinvolvementtypevaluesConstraints(obj Paymentinvolvementtypevalues) error {
	return nil
}
