// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Accountstatustypevalues : >  * `Enabled` - Account can be used for its intended purpose.  * `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.  * `Deleted` - Account cannot be used any longer.  * `Proforma` - Account is temporary and can be partially used for its intended purpose. The account will be fully available for use when the account servicer has received all relevant documents.  * `Pending` - Account change is pending approval.  
type Accountstatustypevalues string

// List of Accountstatustypevalues
const (
	ENABLED Accountstatustypevalues = "Enabled"
	DISABLED Accountstatustypevalues = "Disabled"
	DELETED Accountstatustypevalues = "Deleted"
	PROFORMA Accountstatustypevalues = "Proforma"
	PENDING Accountstatustypevalues = "Pending"
)

// AllowedAccountstatustypevaluesEnumValues is all the allowed values of Accountstatustypevalues enum
var AllowedAccountstatustypevaluesEnumValues = []Accountstatustypevalues{
	"Enabled",
	"Disabled",
	"Deleted",
	"Proforma",
	"Pending",
}

// validAccountstatustypevaluesEnumValue provides a map of Accountstatustypevaluess for fast verification of use input
var validAccountstatustypevaluesEnumValues = map[Accountstatustypevalues]struct{}{
	"Enabled": {},
	"Disabled": {},
	"Deleted": {},
	"Proforma": {},
	"Pending": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Accountstatustypevalues) IsValid() bool {
	_, ok := validAccountstatustypevaluesEnumValues[v]
	return ok
}

// NewAccountstatustypevaluesFromValue returns a pointer to a valid Accountstatustypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountstatustypevaluesFromValue(v string) (Accountstatustypevalues, error) {
	ev := Accountstatustypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Accountstatustypevalues: valid values are %v", v, AllowedAccountstatustypevaluesEnumValues)
}



// AssertAccountstatustypevaluesRequired checks if the required fields are not zero-ed
func AssertAccountstatustypevaluesRequired(obj Accountstatustypevalues) error {
	return nil
}

// AssertAccountstatustypevaluesConstraints checks if the values respects the defined constraints
func AssertAccountstatustypevaluesConstraints(obj Accountstatustypevalues) error {
	return nil
}
