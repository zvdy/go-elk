// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQIssuedDeviceAPIController binds http requests to an api service and writes the service results to the http response
type BQIssuedDeviceAPIController struct {
	service BQIssuedDeviceAPIServicer
	errorHandler ErrorHandler
}

// BQIssuedDeviceAPIOption for how the controller is set up.
type BQIssuedDeviceAPIOption func(*BQIssuedDeviceAPIController)

// WithBQIssuedDeviceAPIErrorHandler inject ErrorHandler into controller
func WithBQIssuedDeviceAPIErrorHandler(h ErrorHandler) BQIssuedDeviceAPIOption {
	return func(c *BQIssuedDeviceAPIController) {
		c.errorHandler = h
	}
}

// NewBQIssuedDeviceAPIController creates a default api controller
func NewBQIssuedDeviceAPIController(s BQIssuedDeviceAPIServicer, opts ...BQIssuedDeviceAPIOption) *BQIssuedDeviceAPIController {
	controller := &BQIssuedDeviceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQIssuedDeviceAPIController
func (c *BQIssuedDeviceAPIController) Routes() Routes {
	return Routes{
		"InitiateIssuedDevice": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/IssuedDevice/Initiate",
			c.InitiateIssuedDevice,
		},
		"RetrieveIssuedDevice": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/IssuedDevice/{issueddeviceid}/Retrieve",
			c.RetrieveIssuedDevice,
		},
		"UpdateIssuedDevice": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/IssuedDevice/{issueddeviceid}/Update",
			c.UpdateIssuedDevice,
		},
	}
}

// InitiateIssuedDevice - InBQ Instantiate a new Issued Device
func (c *BQIssuedDeviceAPIController) InitiateIssuedDevice(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	issuedDeviceParam := IssuedDevice{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issuedDeviceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssuedDeviceRequired(issuedDeviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssuedDeviceConstraints(issuedDeviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateIssuedDevice(r.Context(), leasingidParam, issuedDeviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveIssuedDevice - ReBQ Retrieve details about any aspect of Issued Device
func (c *BQIssuedDeviceAPIController) RetrieveIssuedDevice(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	issueddeviceidParam := params["issueddeviceid"]
	if issueddeviceidParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueddeviceid"}, nil)
		return
	}
	result, err := c.service.RetrieveIssuedDevice(r.Context(), leasingidParam, issueddeviceidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssuedDevice - UpBQ Update details relating to Issued Device
func (c *BQIssuedDeviceAPIController) UpdateIssuedDevice(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	issueddeviceidParam := params["issueddeviceid"]
	if issueddeviceidParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueddeviceid"}, nil)
		return
	}
	issuedDeviceParam := IssuedDevice{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issuedDeviceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssuedDeviceRequired(issuedDeviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssuedDeviceConstraints(issuedDeviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssuedDevice(r.Context(), leasingidParam, issueddeviceidParam, issuedDeviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
