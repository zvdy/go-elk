// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Directdebitmandatearrangement - Processing settings governing direct debits
type Directdebitmandatearrangement struct {

	FinalCollectionDate Datetime `json:"FinalCollectionDate,omitempty"`

	FirstCollectionDate Datetime `json:"FirstCollectionDate,omitempty"`

	CollectionAmount Amount `json:"CollectionAmount,omitempty"`

	MaximumAmount Amount `json:"MaximumAmount,omitempty"`

	PointIntime Frequencytypevalues `json:"PointIntime,omitempty"`

	ArrangementType Arrangementtypevalues `json:"ArrangementType,omitempty"`

	PrenotificationDate Datetime `json:"PrenotificationDate,omitempty"`

	MandateFrequency Directdebitfrequencyvalues `json:"MandateFrequency,omitempty"`

	PrenotificationIndicator Yesnoindicator `json:"PrenotificationIndicator,omitempty"`

	// Specifies the number of days before the direct debit for notifying the debtor (ISO20022)
	PrenotificationThreshold float64 `json:"PrenotificationThreshold,omitempty"`
}

// AssertDirectdebitmandatearrangementRequired checks if the required fields are not zero-ed
func AssertDirectdebitmandatearrangementRequired(obj Directdebitmandatearrangement) error {
	if err := AssertDatetimeRequired(obj.FinalCollectionDate); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.FirstCollectionDate); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.CollectionAmount); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.MaximumAmount); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.PrenotificationDate); err != nil {
		return err
	}
	if err := AssertYesnoindicatorRequired(obj.PrenotificationIndicator); err != nil {
		return err
	}
	return nil
}

// AssertDirectdebitmandatearrangementConstraints checks if the values respects the defined constraints
func AssertDirectdebitmandatearrangementConstraints(obj Directdebitmandatearrangement) error {
	if err := AssertDatetimeConstraints(obj.FinalCollectionDate); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.FirstCollectionDate); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.CollectionAmount); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.MaximumAmount); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.PrenotificationDate); err != nil {
		return err
	}
	if err := AssertYesnoindicatorConstraints(obj.PrenotificationIndicator); err != nil {
		return err
	}
	return nil
}
