// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Fees - The product features/services available with a financical facility
type Fees struct {

	FeeCreditAccount Account `json:"FeeCreditAccount,omitempty"`

	FeeCalculationMethod Servicemodality `json:"FeeCalculationMethod,omitempty"`

	FeeRate Rate `json:"FeeRate,omitempty"`

	FeeApplicationFrequency Feeapplicationfrequencyvalues `json:"FeeApplicationFrequency,omitempty"`

	FeePaymentMethodType Feepaymentmethodtypevalues `json:"FeePaymentMethodType,omitempty"`

	FeeAmount Amount `json:"FeeAmount,omitempty"`

	ChargeBearerReference Involvedparty `json:"ChargeBearerReference,omitempty"`

	FeeType Feetypevalues `json:"FeeType,omitempty"`

	FeeCalculationMethodType Feecalculationmethodtypevalues `json:"FeeCalculationMethodType,omitempty"`

	ChargeBearerType Chargebearertypevalues `json:"ChargeBearerType,omitempty"`

	AccrualFeeAmount Amount `json:"AccrualFeeAmount,omitempty"`

	FeeApplicationAmount Amount `json:"FeeApplicationAmount,omitempty"`

	FeeCalculationFrequency Feecalculationfrequencyvalues `json:"FeeCalculationFrequency,omitempty"`

	FeeApplicationDate Datetime `json:"FeeApplicationDate,omitempty"`

	FeeDebitAccount Account `json:"FeeDebitAccount,omitempty"`

	FeeApplicationCreditDebitIndicator Debitcreditindicatortvalues `json:"FeeApplicationCreditDebitIndicator,omitempty"`

	FeePaymentMethod Servicemodality `json:"FeePaymentMethod,omitempty"`

	AccruedCreditDebitIndicator Debitcreditindicatortvalues `json:"AccruedCreditDebitIndicator,omitempty"`
}

// AssertFeesRequired checks if the required fields are not zero-ed
func AssertFeesRequired(obj Fees) error {
	if err := AssertAccountRequired(obj.FeeCreditAccount); err != nil {
		return err
	}
	if err := AssertServicemodalityRequired(obj.FeeCalculationMethod); err != nil {
		return err
	}
	if err := AssertRateRequired(obj.FeeRate); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.FeeAmount); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.ChargeBearerReference); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.AccrualFeeAmount); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.FeeApplicationAmount); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.FeeApplicationDate); err != nil {
		return err
	}
	if err := AssertAccountRequired(obj.FeeDebitAccount); err != nil {
		return err
	}
	if err := AssertServicemodalityRequired(obj.FeePaymentMethod); err != nil {
		return err
	}
	return nil
}

// AssertFeesConstraints checks if the values respects the defined constraints
func AssertFeesConstraints(obj Fees) error {
	if err := AssertAccountConstraints(obj.FeeCreditAccount); err != nil {
		return err
	}
	if err := AssertServicemodalityConstraints(obj.FeeCalculationMethod); err != nil {
		return err
	}
	if err := AssertRateConstraints(obj.FeeRate); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.FeeAmount); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.ChargeBearerReference); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.AccrualFeeAmount); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.FeeApplicationAmount); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.FeeApplicationDate); err != nil {
		return err
	}
	if err := AssertAccountConstraints(obj.FeeDebitAccount); err != nil {
		return err
	}
	if err := AssertServicemodalityConstraints(obj.FeePaymentMethod); err != nil {
		return err
	}
	return nil
}
