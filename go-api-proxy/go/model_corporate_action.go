// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// CorporateAction - The product features/services available with a financical facility
type CorporateAction struct {

	CorporateActionPreconditions Condition `json:"CorporateActionPreconditions,omitempty"`

	CorporateActionFeatureSchedule Schedule `json:"CorporateActionFeatureSchedule,omitempty"`

	CorporateActionProcessing Businessservice `json:"CorporateActionProcessing,omitempty"`

	CorporateActionPostconditions Condition `json:"CorporateActionPostconditions,omitempty"`

	CorporateActionProcessingServiceType Text `json:"CorporateActionProcessingServiceType,omitempty"`

	CorporateActionProcessingServiceDescription Text `json:"CorporateActionProcessingServiceDescription,omitempty"`

	CorporateActionProcessingServiceInputsandOuputs Text `json:"CorporateActionProcessingServiceInputsandOuputs,omitempty"`

	CorporateActionProcessingServiceWorkProduct Workproduct `json:"CorporateActionProcessingServiceWorkProduct,omitempty"`

	CorporateActionProcessingServiceName Name `json:"CorporateActionProcessingServiceName,omitempty"`
}

// AssertCorporateActionRequired checks if the required fields are not zero-ed
func AssertCorporateActionRequired(obj CorporateAction) error {
	if err := AssertConditionRequired(obj.CorporateActionPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.CorporateActionFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceRequired(obj.CorporateActionProcessing); err != nil {
		return err
	}
	if err := AssertConditionRequired(obj.CorporateActionPostconditions); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CorporateActionProcessingServiceType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CorporateActionProcessingServiceDescription); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CorporateActionProcessingServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductRequired(obj.CorporateActionProcessingServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.CorporateActionProcessingServiceName); err != nil {
		return err
	}
	return nil
}

// AssertCorporateActionConstraints checks if the values respects the defined constraints
func AssertCorporateActionConstraints(obj CorporateAction) error {
	if err := AssertConditionConstraints(obj.CorporateActionPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.CorporateActionFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceConstraints(obj.CorporateActionProcessing); err != nil {
		return err
	}
	if err := AssertConditionConstraints(obj.CorporateActionPostconditions); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CorporateActionProcessingServiceType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CorporateActionProcessingServiceDescription); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CorporateActionProcessingServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductConstraints(obj.CorporateActionProcessingServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.CorporateActionProcessingServiceName); err != nil {
		return err
	}
	return nil
}
