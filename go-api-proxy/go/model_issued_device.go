// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// IssuedDevice - The product features/services available with a financical facility
type IssuedDevice struct {

	DeviceDeliveryMethod Text `json:"DeviceDeliveryMethod,omitempty"`

	DeviceIssueDate Datetime `json:"DeviceIssueDate,omitempty"`

	DeviceAssociatedPermissions Arrangement `json:"DeviceAssociatedPermissions,omitempty"`

	DeviceStatus Issueddevicestatustypevalues `json:"DeviceStatus,omitempty"`

	AccountIdentifier Accountidentification `json:"AccountIdentifier,omitempty"`

	AccountExternalAccountNumber Identifier `json:"AccountExternalAccountNumber,omitempty"`

	DevicePartyReference Involvedparty `json:"DevicePartyReference,omitempty"`

	DeviceType Devicetypevalues `json:"DeviceType,omitempty"`

	DeviceOptionSetting Arrangement `json:"DeviceOptionSetting,omitempty"`

	DeviceCustomerCustomizationReference Devicecustomizationtypevalues `json:"DeviceCustomerCustomizationReference,omitempty"`

	DeviceCollectLocation Branch `json:"DeviceCollectLocation,omitempty"`

	DeviceValidtoDate Datetime `json:"DeviceValidtoDate,omitempty"`

	DeviceOptionDefinition Feature `json:"DeviceOptionDefinition,omitempty"`

	DevicePropertySeting Arrangement `json:"DevicePropertySeting,omitempty"`

	DeviceProcessingGuidelinesandRules Ruleset `json:"DeviceProcessingGuidelinesandRules,omitempty"`

	DeviceValidfromDate Datetime `json:"DeviceValidfromDate,omitempty"`

	CustomerReference Involvedparty `json:"CustomerReference,omitempty"`

	IssuedDeviceAdministrationReference Device `json:"IssuedDeviceAdministrationReference,omitempty"`

	DevicePropertyType Feature `json:"DevicePropertyType,omitempty"`
}

// AssertIssuedDeviceRequired checks if the required fields are not zero-ed
func AssertIssuedDeviceRequired(obj IssuedDevice) error {
	if err := AssertTextRequired(obj.DeviceDeliveryMethod); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.DeviceIssueDate); err != nil {
		return err
	}
	if err := AssertArrangementRequired(obj.DeviceAssociatedPermissions); err != nil {
		return err
	}
	if err := AssertAccountidentificationRequired(obj.AccountIdentifier); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.AccountExternalAccountNumber); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.DevicePartyReference); err != nil {
		return err
	}
	if err := AssertArrangementRequired(obj.DeviceOptionSetting); err != nil {
		return err
	}
	if err := AssertBranchRequired(obj.DeviceCollectLocation); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.DeviceValidtoDate); err != nil {
		return err
	}
	if err := AssertFeatureRequired(obj.DeviceOptionDefinition); err != nil {
		return err
	}
	if err := AssertArrangementRequired(obj.DevicePropertySeting); err != nil {
		return err
	}
	if err := AssertRulesetRequired(obj.DeviceProcessingGuidelinesandRules); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.DeviceValidfromDate); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.CustomerReference); err != nil {
		return err
	}
	if err := AssertDeviceRequired(obj.IssuedDeviceAdministrationReference); err != nil {
		return err
	}
	if err := AssertFeatureRequired(obj.DevicePropertyType); err != nil {
		return err
	}
	return nil
}

// AssertIssuedDeviceConstraints checks if the values respects the defined constraints
func AssertIssuedDeviceConstraints(obj IssuedDevice) error {
	if err := AssertTextConstraints(obj.DeviceDeliveryMethod); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.DeviceIssueDate); err != nil {
		return err
	}
	if err := AssertArrangementConstraints(obj.DeviceAssociatedPermissions); err != nil {
		return err
	}
	if err := AssertAccountidentificationConstraints(obj.AccountIdentifier); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.AccountExternalAccountNumber); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.DevicePartyReference); err != nil {
		return err
	}
	if err := AssertArrangementConstraints(obj.DeviceOptionSetting); err != nil {
		return err
	}
	if err := AssertBranchConstraints(obj.DeviceCollectLocation); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.DeviceValidtoDate); err != nil {
		return err
	}
	if err := AssertFeatureConstraints(obj.DeviceOptionDefinition); err != nil {
		return err
	}
	if err := AssertArrangementConstraints(obj.DevicePropertySeting); err != nil {
		return err
	}
	if err := AssertRulesetConstraints(obj.DeviceProcessingGuidelinesandRules); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.DeviceValidfromDate); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.CustomerReference); err != nil {
		return err
	}
	if err := AssertDeviceConstraints(obj.IssuedDeviceAdministrationReference); err != nil {
		return err
	}
	if err := AssertFeatureConstraints(obj.DevicePropertyType); err != nil {
		return err
	}
	return nil
}
