// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Sweep - The product features/services available with a financical facility
type Sweep struct {

	AccountSweepApplicationSchedule Schedule `json:"AccountSweepApplicationSchedule,omitempty"`

	AccountSweepDefinition Text `json:"AccountSweepDefinition,omitempty"`

	AccountSweepType Text `json:"AccountSweepType,omitempty"`

	AccountSweepApplicationRecord Sweeptransaction `json:"AccountSweepApplicationRecord,omitempty"`

	AccountSweepExecutionDate Datetime `json:"AccountSweepExecutionDate,omitempty"`

	AccountSweepProcessingSchedule Schedule `json:"AccountSweepProcessingSchedule,omitempty"`

	AccountSweepAmount Amount `json:"AccountSweepAmount,omitempty"`

	AccountSweepMandate Mandate `json:"AccountSweepMandate,omitempty"`

	AccountSweepConfiguration Sweeparrangement `json:"AccountSweepConfiguration,omitempty"`

	AccountSweepTargetAccount Financialfacility `json:"AccountSweepTargetAccount,omitempty"`
}

// AssertSweepRequired checks if the required fields are not zero-ed
func AssertSweepRequired(obj Sweep) error {
	if err := AssertScheduleRequired(obj.AccountSweepApplicationSchedule); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.AccountSweepDefinition); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.AccountSweepType); err != nil {
		return err
	}
	if err := AssertSweeptransactionRequired(obj.AccountSweepApplicationRecord); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.AccountSweepExecutionDate); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.AccountSweepProcessingSchedule); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.AccountSweepAmount); err != nil {
		return err
	}
	if err := AssertMandateRequired(obj.AccountSweepMandate); err != nil {
		return err
	}
	if err := AssertSweeparrangementRequired(obj.AccountSweepConfiguration); err != nil {
		return err
	}
	if err := AssertFinancialfacilityRequired(obj.AccountSweepTargetAccount); err != nil {
		return err
	}
	return nil
}

// AssertSweepConstraints checks if the values respects the defined constraints
func AssertSweepConstraints(obj Sweep) error {
	if err := AssertScheduleConstraints(obj.AccountSweepApplicationSchedule); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.AccountSweepDefinition); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.AccountSweepType); err != nil {
		return err
	}
	if err := AssertSweeptransactionConstraints(obj.AccountSweepApplicationRecord); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.AccountSweepExecutionDate); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.AccountSweepProcessingSchedule); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.AccountSweepAmount); err != nil {
		return err
	}
	if err := AssertMandateConstraints(obj.AccountSweepMandate); err != nil {
		return err
	}
	if err := AssertSweeparrangementConstraints(obj.AccountSweepConfiguration); err != nil {
		return err
	}
	if err := AssertFinancialfacilityConstraints(obj.AccountSweepTargetAccount); err != nil {
		return err
	}
	return nil
}
