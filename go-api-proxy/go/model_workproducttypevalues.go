// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Workproducttypevalues : >  * `Document` -   * `WorkingPaper` -   * `ActivityLog` -   * `Form` -   * `File` - File of consolidated notes, evaluations and recommendations for the work task  * `MeetingSchedule` -   * `MeetingMinute` -   
type Workproducttypevalues string

// List of Workproducttypevalues
const (
	DOCUMENT Workproducttypevalues = "Document"
	WORKING_PAPER Workproducttypevalues = "WorkingPaper"
	ACTIVITY_LOG Workproducttypevalues = "ActivityLog"
	FORM Workproducttypevalues = "Form"
	FILE Workproducttypevalues = "File"
	MEETING_SCHEDULE Workproducttypevalues = "MeetingSchedule"
	MEETING_MINUTE Workproducttypevalues = "MeetingMinute"
)

// AllowedWorkproducttypevaluesEnumValues is all the allowed values of Workproducttypevalues enum
var AllowedWorkproducttypevaluesEnumValues = []Workproducttypevalues{
	"Document",
	"WorkingPaper",
	"ActivityLog",
	"Form",
	"File",
	"MeetingSchedule",
	"MeetingMinute",
}

// validWorkproducttypevaluesEnumValue provides a map of Workproducttypevaluess for fast verification of use input
var validWorkproducttypevaluesEnumValues = map[Workproducttypevalues]struct{}{
	"Document": {},
	"WorkingPaper": {},
	"ActivityLog": {},
	"Form": {},
	"File": {},
	"MeetingSchedule": {},
	"MeetingMinute": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Workproducttypevalues) IsValid() bool {
	_, ok := validWorkproducttypevaluesEnumValues[v]
	return ok
}

// NewWorkproducttypevaluesFromValue returns a pointer to a valid Workproducttypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkproducttypevaluesFromValue(v string) (Workproducttypevalues, error) {
	ev := Workproducttypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Workproducttypevalues: valid values are %v", v, AllowedWorkproducttypevaluesEnumValues)
}



// AssertWorkproducttypevaluesRequired checks if the required fields are not zero-ed
func AssertWorkproducttypevaluesRequired(obj Workproducttypevalues) error {
	return nil
}

// AssertWorkproducttypevaluesConstraints checks if the values respects the defined constraints
func AssertWorkproducttypevaluesConstraints(obj Workproducttypevalues) error {
	return nil
}
