// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Accounttypevalues : The type of account which is linked to Leasing Arrangement OBExternalAccountSubType1Code| ()|Standard|UK Open Banking ()
type Accounttypevalues string

// List of Accounttypevalues
const (
	DEBIT_ACCOUNT Accounttypevalues = "DebitAccount"
	CREDIT_ACCOUNT Accounttypevalues = "CreditAccount"
	VOSTRO_ACOUNT Accounttypevalues = "VostroAcount"
	NOSTRO_ACCOUNT Accounttypevalues = "NostroAccount"
	PAYMENT_ACCOUNT Accounttypevalues = "PaymentAccount"
	SETTLEMENT_ACCOUNT Accounttypevalues = "SettlementAccount"
	SAVING_ACCOUNT Accounttypevalues = "SavingAccount"
	CURRENT_ACCOUNT Accounttypevalues = "CurrentAccount"
	CASH_ACCOUNT Accounttypevalues = "CashAccount"
	LOAN_ACCOUNT Accounttypevalues = "LoanAccount"
)

// AllowedAccounttypevaluesEnumValues is all the allowed values of Accounttypevalues enum
var AllowedAccounttypevaluesEnumValues = []Accounttypevalues{
	"DebitAccount",
	"CreditAccount",
	"VostroAcount",
	"NostroAccount",
	"PaymentAccount",
	"SettlementAccount",
	"SavingAccount",
	"CurrentAccount",
	"CashAccount",
	"LoanAccount",
}

// validAccounttypevaluesEnumValue provides a map of Accounttypevaluess for fast verification of use input
var validAccounttypevaluesEnumValues = map[Accounttypevalues]struct{}{
	"DebitAccount": {},
	"CreditAccount": {},
	"VostroAcount": {},
	"NostroAccount": {},
	"PaymentAccount": {},
	"SettlementAccount": {},
	"SavingAccount": {},
	"CurrentAccount": {},
	"CashAccount": {},
	"LoanAccount": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Accounttypevalues) IsValid() bool {
	_, ok := validAccounttypevaluesEnumValues[v]
	return ok
}

// NewAccounttypevaluesFromValue returns a pointer to a valid Accounttypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccounttypevaluesFromValue(v string) (Accounttypevalues, error) {
	ev := Accounttypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Accounttypevalues: valid values are %v", v, AllowedAccounttypevaluesEnumValues)
}



// AssertAccounttypevaluesRequired checks if the required fields are not zero-ed
func AssertAccounttypevaluesRequired(obj Accounttypevalues) error {
	return nil
}

// AssertAccounttypevaluesConstraints checks if the values respects the defined constraints
func AssertAccounttypevaluesConstraints(obj Accounttypevalues) error {
	return nil
}
