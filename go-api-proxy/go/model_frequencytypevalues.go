// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Frequencytypevalues : >  * `Annual` - Event takes place every year or once a year.  * `Monthly` - Event takes place every month or once a month.  * `Quarterly` - Event takes place every three months or four times a year.  * `Semiannual` - Event takes place every six months or two times a year.  * `Weekly` - Event takes place once a week.  * `Daily` - Event takes place every day.  * `Adhoc` - Event takes place on request or as necessary.  * `Intraday` - Event takes place several times a day.  * `Overnight` - Event takes place overnight.  * `Tendays` - Event takes place every ten business days.  * `Fortnightly` - Event takes place every two weeks.  * `Triggeredbymovement` - Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day.  * `Never` - Event does never take place.  * `Rate` - Event takes place based on a change of a rate.  * `Oncreditevent` - Event occurs due to a credit event occurring for an issuer.  * `Upfront` - Event that takes place at the initiation of a trade or agreement.  * `Onexpiry` - Event occurs on expiry of a financial contract.  * `Hourly` - Event takes place every hours.  
type Frequencytypevalues string

// List of Frequencytypevalues
const (
	ANNUAL Frequencytypevalues = "Annual"
	MONTHLY Frequencytypevalues = "Monthly"
	QUARTERLY Frequencytypevalues = "Quarterly"
	SEMIANNUAL Frequencytypevalues = "Semiannual"
	WEEKLY Frequencytypevalues = "Weekly"
	DAILY Frequencytypevalues = "Daily"
	ADHOC Frequencytypevalues = "Adhoc"
	INTRADAY Frequencytypevalues = "Intraday"
	OVERNIGHT Frequencytypevalues = "Overnight"
	TENDAYS Frequencytypevalues = "Tendays"
	FORTNIGHTLY Frequencytypevalues = "Fortnightly"
	TRIGGEREDBYMOVEMENT Frequencytypevalues = "Triggeredbymovement"
	NEVER Frequencytypevalues = "Never"
	RATE Frequencytypevalues = "Rate"
	ONCREDITEVENT Frequencytypevalues = "Oncreditevent"
	UPFRONT Frequencytypevalues = "Upfront"
	ONEXPIRY Frequencytypevalues = "Onexpiry"
	HOURLY Frequencytypevalues = "Hourly"
)

// AllowedFrequencytypevaluesEnumValues is all the allowed values of Frequencytypevalues enum
var AllowedFrequencytypevaluesEnumValues = []Frequencytypevalues{
	"Annual",
	"Monthly",
	"Quarterly",
	"Semiannual",
	"Weekly",
	"Daily",
	"Adhoc",
	"Intraday",
	"Overnight",
	"Tendays",
	"Fortnightly",
	"Triggeredbymovement",
	"Never",
	"Rate",
	"Oncreditevent",
	"Upfront",
	"Onexpiry",
	"Hourly",
}

// validFrequencytypevaluesEnumValue provides a map of Frequencytypevaluess for fast verification of use input
var validFrequencytypevaluesEnumValues = map[Frequencytypevalues]struct{}{
	"Annual": {},
	"Monthly": {},
	"Quarterly": {},
	"Semiannual": {},
	"Weekly": {},
	"Daily": {},
	"Adhoc": {},
	"Intraday": {},
	"Overnight": {},
	"Tendays": {},
	"Fortnightly": {},
	"Triggeredbymovement": {},
	"Never": {},
	"Rate": {},
	"Oncreditevent": {},
	"Upfront": {},
	"Onexpiry": {},
	"Hourly": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Frequencytypevalues) IsValid() bool {
	_, ok := validFrequencytypevaluesEnumValues[v]
	return ok
}

// NewFrequencytypevaluesFromValue returns a pointer to a valid Frequencytypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFrequencytypevaluesFromValue(v string) (Frequencytypevalues, error) {
	ev := Frequencytypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Frequencytypevalues: valid values are %v", v, AllowedFrequencytypevaluesEnumValues)
}



// AssertFrequencytypevaluesRequired checks if the required fields are not zero-ed
func AssertFrequencytypevaluesRequired(obj Frequencytypevalues) error {
	return nil
}

// AssertFrequencytypevaluesConstraints checks if the values respects the defined constraints
func AssertFrequencytypevaluesConstraints(obj Frequencytypevalues) error {
	return nil
}
