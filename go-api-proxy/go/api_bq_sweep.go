// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQSweepAPIController binds http requests to an api service and writes the service results to the http response
type BQSweepAPIController struct {
	service BQSweepAPIServicer
	errorHandler ErrorHandler
}

// BQSweepAPIOption for how the controller is set up.
type BQSweepAPIOption func(*BQSweepAPIController)

// WithBQSweepAPIErrorHandler inject ErrorHandler into controller
func WithBQSweepAPIErrorHandler(h ErrorHandler) BQSweepAPIOption {
	return func(c *BQSweepAPIController) {
		c.errorHandler = h
	}
}

// NewBQSweepAPIController creates a default api controller
func NewBQSweepAPIController(s BQSweepAPIServicer, opts ...BQSweepAPIOption) *BQSweepAPIController {
	controller := &BQSweepAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQSweepAPIController
func (c *BQSweepAPIController) Routes() Routes {
	return Routes{
		"ExchangeSweep": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Sweep/{sweepid}/Exchange",
			c.ExchangeSweep,
		},
		"InitiateSweep": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Sweep/Initiate",
			c.InitiateSweep,
		},
		"RetrieveSweep": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Sweep/{sweepid}/Retrieve",
			c.RetrieveSweep,
		},
		"UpdateSweep": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Sweep/{sweepid}/Update",
			c.UpdateSweep,
		},
	}
}

// ExchangeSweep - EcBQ Accept, verify, etc. aspects of Sweep processing
func (c *BQSweepAPIController) ExchangeSweep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	sweepidParam := params["sweepid"]
	if sweepidParam == "" {
		c.errorHandler(w, r, &RequiredError{"sweepid"}, nil)
		return
	}
	sweepParam := Sweep{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sweepParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSweepRequired(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSweepConstraints(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExchangeSweep(r.Context(), leasingidParam, sweepidParam, sweepParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiateSweep - InBQ Instantiate a new Sweep
func (c *BQSweepAPIController) InitiateSweep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	sweepParam := Sweep{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sweepParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSweepRequired(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSweepConstraints(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateSweep(r.Context(), leasingidParam, sweepParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveSweep - ReBQ Retrieve details about any aspect of Sweep
func (c *BQSweepAPIController) RetrieveSweep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	sweepidParam := params["sweepid"]
	if sweepidParam == "" {
		c.errorHandler(w, r, &RequiredError{"sweepid"}, nil)
		return
	}
	result, err := c.service.RetrieveSweep(r.Context(), leasingidParam, sweepidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateSweep - UpBQ Update details relating to Sweep
func (c *BQSweepAPIController) UpdateSweep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	sweepidParam := params["sweepid"]
	if sweepidParam == "" {
		c.errorHandler(w, r, &RequiredError{"sweepid"}, nil)
		return
	}
	sweepParam := Sweep{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sweepParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSweepRequired(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSweepConstraints(sweepParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSweep(r.Context(), leasingidParam, sweepidParam, sweepParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
