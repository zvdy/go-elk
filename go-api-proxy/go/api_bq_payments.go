// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQPaymentsAPIController binds http requests to an api service and writes the service results to the http response
type BQPaymentsAPIController struct {
	service BQPaymentsAPIServicer
	errorHandler ErrorHandler
}

// BQPaymentsAPIOption for how the controller is set up.
type BQPaymentsAPIOption func(*BQPaymentsAPIController)

// WithBQPaymentsAPIErrorHandler inject ErrorHandler into controller
func WithBQPaymentsAPIErrorHandler(h ErrorHandler) BQPaymentsAPIOption {
	return func(c *BQPaymentsAPIController) {
		c.errorHandler = h
	}
}

// NewBQPaymentsAPIController creates a default api controller
func NewBQPaymentsAPIController(s BQPaymentsAPIServicer, opts ...BQPaymentsAPIOption) *BQPaymentsAPIController {
	controller := &BQPaymentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQPaymentsAPIController
func (c *BQPaymentsAPIController) Routes() Routes {
	return Routes{
		"ExchangePayments": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Payments/{paymentsid}/Exchange",
			c.ExchangePayments,
		},
		"InitiatePayments": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Payments/Initiate",
			c.InitiatePayments,
		},
		"RetrievePayments": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Payments/{paymentsid}/Retrieve",
			c.RetrievePayments,
		},
		"UpdatePayments": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Payments/{paymentsid}/Update",
			c.UpdatePayments,
		},
	}
}

// ExchangePayments - EcBQ Accept, verify, etc. aspects of Payments processing
func (c *BQPaymentsAPIController) ExchangePayments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	paymentsidParam := params["paymentsid"]
	if paymentsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"paymentsid"}, nil)
		return
	}
	paymentsParam := Payments{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPaymentsRequired(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPaymentsConstraints(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExchangePayments(r.Context(), leasingidParam, paymentsidParam, paymentsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiatePayments - InBQ Instantiate a new Payments
func (c *BQPaymentsAPIController) InitiatePayments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	paymentsParam := Payments{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPaymentsRequired(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPaymentsConstraints(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiatePayments(r.Context(), leasingidParam, paymentsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrievePayments - ReBQ Retrieve details about any aspect of Payments
func (c *BQPaymentsAPIController) RetrievePayments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	paymentsidParam := params["paymentsid"]
	if paymentsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"paymentsid"}, nil)
		return
	}
	result, err := c.service.RetrievePayments(r.Context(), leasingidParam, paymentsidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePayments - UpBQ Update details relating to Payments
func (c *BQPaymentsAPIController) UpdatePayments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	paymentsidParam := params["paymentsid"]
	if paymentsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"paymentsid"}, nil)
		return
	}
	paymentsParam := Payments{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPaymentsRequired(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPaymentsConstraints(paymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePayments(r.Context(), leasingidParam, paymentsidParam, paymentsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
