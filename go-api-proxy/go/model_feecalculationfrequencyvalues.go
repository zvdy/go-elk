// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Feecalculationfrequencyvalues : >  * `Onclosing` - This fee is triggered on closing of a product  * `Onopening` - This fee is triggered on opening of a product  * `Chargingperiod` - This fee is triggered at the end of each charging period  * `Daily` - This fee is triggered every day  * `Peritem` - This fee is triggered by the processing of an item on the product  * `Monthly` - This fee is triggered monthly  * `Onanniversary` - This fee is triggered on the anniversary of opening the product  * `Other` - Other Fee Frequency  * `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn  * `Perhour` - This fee is triggered every hour  * `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.  * `Persheet` - This fee is levied on every statement sheet  * `Pertransaction` - The fee is charged for each transaction  * `Pertransactionamount` - The amount stated is levied for each transaction processed  * `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction  * `Quarterly` - This fee is triggered at the end of every quarter  * `Sixmonthly` - This fee is triggered at the end of every 6 month period  * `Statementmonthly` - This fee is triggered based on a monthly statement period  * `Weekly` - The fee is triggered weekly  * `Yearly` - This fee is triggered yearly  
type Feecalculationfrequencyvalues string

// List of Feecalculationfrequencyvalues
const (
	ONCLOSING Feecalculationfrequencyvalues = "Onclosing"
	ONOPENING Feecalculationfrequencyvalues = "Onopening"
	CHARGINGPERIOD Feecalculationfrequencyvalues = "Chargingperiod"
	DAILY Feecalculationfrequencyvalues = "Daily"
	PERITEM Feecalculationfrequencyvalues = "Peritem"
	MONTHLY Feecalculationfrequencyvalues = "Monthly"
	ONANNIVERSARY Feecalculationfrequencyvalues = "Onanniversary"
	OTHER Feecalculationfrequencyvalues = "Other"
	PERHUNDREDPOUNDS Feecalculationfrequencyvalues = "Perhundredpounds"
	PERHOUR Feecalculationfrequencyvalues = "Perhour"
	PEROCCURRENCE Feecalculationfrequencyvalues = "Peroccurrence"
	PERSHEET Feecalculationfrequencyvalues = "Persheet"
	PERTRANSACTION Feecalculationfrequencyvalues = "Pertransaction"
	PERTRANSACTIONAMOUNT Feecalculationfrequencyvalues = "Pertransactionamount"
	PERTRANSACTIONPERCENTAGE Feecalculationfrequencyvalues = "Pertransactionpercentage"
	QUARTERLY Feecalculationfrequencyvalues = "Quarterly"
	SIXMONTHLY Feecalculationfrequencyvalues = "Sixmonthly"
	STATEMENTMONTHLY Feecalculationfrequencyvalues = "Statementmonthly"
	WEEKLY Feecalculationfrequencyvalues = "Weekly"
	YEARLY Feecalculationfrequencyvalues = "Yearly"
)

// AllowedFeecalculationfrequencyvaluesEnumValues is all the allowed values of Feecalculationfrequencyvalues enum
var AllowedFeecalculationfrequencyvaluesEnumValues = []Feecalculationfrequencyvalues{
	"Onclosing",
	"Onopening",
	"Chargingperiod",
	"Daily",
	"Peritem",
	"Monthly",
	"Onanniversary",
	"Other",
	"Perhundredpounds",
	"Perhour",
	"Peroccurrence",
	"Persheet",
	"Pertransaction",
	"Pertransactionamount",
	"Pertransactionpercentage",
	"Quarterly",
	"Sixmonthly",
	"Statementmonthly",
	"Weekly",
	"Yearly",
}

// validFeecalculationfrequencyvaluesEnumValue provides a map of Feecalculationfrequencyvaluess for fast verification of use input
var validFeecalculationfrequencyvaluesEnumValues = map[Feecalculationfrequencyvalues]struct{}{
	"Onclosing": {},
	"Onopening": {},
	"Chargingperiod": {},
	"Daily": {},
	"Peritem": {},
	"Monthly": {},
	"Onanniversary": {},
	"Other": {},
	"Perhundredpounds": {},
	"Perhour": {},
	"Peroccurrence": {},
	"Persheet": {},
	"Pertransaction": {},
	"Pertransactionamount": {},
	"Pertransactionpercentage": {},
	"Quarterly": {},
	"Sixmonthly": {},
	"Statementmonthly": {},
	"Weekly": {},
	"Yearly": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Feecalculationfrequencyvalues) IsValid() bool {
	_, ok := validFeecalculationfrequencyvaluesEnumValues[v]
	return ok
}

// NewFeecalculationfrequencyvaluesFromValue returns a pointer to a valid Feecalculationfrequencyvalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeecalculationfrequencyvaluesFromValue(v string) (Feecalculationfrequencyvalues, error) {
	ev := Feecalculationfrequencyvalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Feecalculationfrequencyvalues: valid values are %v", v, AllowedFeecalculationfrequencyvaluesEnumValues)
}



// AssertFeecalculationfrequencyvaluesRequired checks if the required fields are not zero-ed
func AssertFeecalculationfrequencyvaluesRequired(obj Feecalculationfrequencyvalues) error {
	return nil
}

// AssertFeecalculationfrequencyvaluesConstraints checks if the values respects the defined constraints
func AssertFeecalculationfrequencyvaluesConstraints(obj Feecalculationfrequencyvalues) error {
	return nil
}
