// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Interest - The product features/services available with a financical facility
type Interest struct {

	InterestType Interesttypevalues `json:"InterestType,omitempty"`

	InterestCalculationMethod Interestcalculationmethodtypevalues `json:"InterestCalculationMethod,omitempty"`

	InterestPeriod Datetimeperiod `json:"InterestPeriod,omitempty"`

	InterestRateApplicationSchedule Schedule `json:"InterestRateApplicationSchedule,omitempty"`

	InterestCreditDebitIndicator Debitcreditindicatortvalues `json:"InterestCreditDebitIndicator,omitempty"`

	InterestCalculationFrequency Frequency `json:"InterestCalculationFrequency,omitempty"`

	InterestAmount Amount `json:"InterestAmount,omitempty"`

	InterestTax Taxarrangement `json:"InterestTax,omitempty"`

	InterestAccrualType Interesttypevalues `json:"InterestAccrualType,omitempty"`

	InterestTransaction Interesttransaction `json:"InterestTransaction,omitempty"`

	InterestFee Feearrangement `json:"InterestFee,omitempty"`

	InterestCalculationDate Datetime `json:"InterestCalculationDate,omitempty"`

	InterestAccrualAmount Amount `json:"InterestAccrualAmount,omitempty"`

	InterestRate Rate `json:"InterestRate,omitempty"`

	InterestDate Datetime `json:"InterestDate,omitempty"`

	InterestAccrualDate Datetime `json:"InterestAccrualDate,omitempty"`

	InterestPaymentFrequency Frequency `json:"InterestPaymentFrequency,omitempty"`

	InterestRateType Interestratetypevalues `json:"InterestRateType,omitempty"`
}

// AssertInterestRequired checks if the required fields are not zero-ed
func AssertInterestRequired(obj Interest) error {
	if err := AssertDatetimeperiodRequired(obj.InterestPeriod); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.InterestRateApplicationSchedule); err != nil {
		return err
	}
	if err := AssertFrequencyRequired(obj.InterestCalculationFrequency); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.InterestAmount); err != nil {
		return err
	}
	if err := AssertTaxarrangementRequired(obj.InterestTax); err != nil {
		return err
	}
	if err := AssertInteresttransactionRequired(obj.InterestTransaction); err != nil {
		return err
	}
	if err := AssertFeearrangementRequired(obj.InterestFee); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.InterestCalculationDate); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.InterestAccrualAmount); err != nil {
		return err
	}
	if err := AssertRateRequired(obj.InterestRate); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.InterestDate); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.InterestAccrualDate); err != nil {
		return err
	}
	if err := AssertFrequencyRequired(obj.InterestPaymentFrequency); err != nil {
		return err
	}
	return nil
}

// AssertInterestConstraints checks if the values respects the defined constraints
func AssertInterestConstraints(obj Interest) error {
	if err := AssertDatetimeperiodConstraints(obj.InterestPeriod); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.InterestRateApplicationSchedule); err != nil {
		return err
	}
	if err := AssertFrequencyConstraints(obj.InterestCalculationFrequency); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.InterestAmount); err != nil {
		return err
	}
	if err := AssertTaxarrangementConstraints(obj.InterestTax); err != nil {
		return err
	}
	if err := AssertInteresttransactionConstraints(obj.InterestTransaction); err != nil {
		return err
	}
	if err := AssertFeearrangementConstraints(obj.InterestFee); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.InterestCalculationDate); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.InterestAccrualAmount); err != nil {
		return err
	}
	if err := AssertRateConstraints(obj.InterestRate); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.InterestDate); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.InterestAccrualDate); err != nil {
		return err
	}
	if err := AssertFrequencyConstraints(obj.InterestPaymentFrequency); err != nil {
		return err
	}
	return nil
}
