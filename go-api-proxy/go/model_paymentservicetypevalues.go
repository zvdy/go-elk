// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentservicetypevalues : >  * `CreditTransferService` - A payment service allowing a payer to transfer fund to a beneficiary. (a proposed definition for BIAN BOM adapted from ECB)  * `StandingOrderService` - A credit transfer service to make regular transfers on given dates to a named beneÔ¨Åciary. (a proposed definition for BIAN BOM adapted from ISO20022)  * `DirectDebitService` - A payment service for debiting a payer's payment account, where a payment transaction is initiated by the payee on the basis of the payer's consent given to the payee, to the payee's payment service provider or to the payer's own payment service provider. (a proposed definition for BIAN BOM adapted from PSD)  * `CardPaymentService` - A payment service to execute payment transactions through a payment card, including online payments. (a proposed definition for BIAN BOM adapted from PSD)  * `WithdrawService` - A payment service to take fund out of an account. (a proposed definition for BIAN BOM)  * `DepositService` - A payment service to place funds into an account for safekeeping. (a proposed definition for BIAN BOM)  * `OverdraftService` - A payment service that allows fund transfer even if there is no provision on the account. (a proposed definition for BIAN BOM)  * `MoneyRemittanceService` - A payment service where funds are received from a payer, without any payment accounts being created in the name of the payer or the payee, for the sole purpose of transferring a corresponding amount to a payee or to another payment service provider acting on behalf of the payee, and/or where such funds are received on behalf of and made available to the payee. (a proposed definition for BIAN BOM adapted from PSD)  * `StatementService` - A reporting service on payment transactions registered on an account. (a proposed definition for BIAN BOM)  
type Paymentservicetypevalues string

// List of Paymentservicetypevalues
const (
	CREDIT_TRANSFER_SERVICE Paymentservicetypevalues = "CreditTransferService"
	STANDING_ORDER_SERVICE Paymentservicetypevalues = "StandingOrderService"
	DIRECT_DEBIT_SERVICE Paymentservicetypevalues = "DirectDebitService"
	CARD_PAYMENT_SERVICE Paymentservicetypevalues = "CardPaymentService"
	WITHDRAW_SERVICE Paymentservicetypevalues = "WithdrawService"
	DEPOSIT_SERVICE Paymentservicetypevalues = "DepositService"
	OVERDRAFT_SERVICE Paymentservicetypevalues = "OverdraftService"
	MONEY_REMITTANCE_SERVICE Paymentservicetypevalues = "MoneyRemittanceService"
	STATEMENT_SERVICE Paymentservicetypevalues = "StatementService"
)

// AllowedPaymentservicetypevaluesEnumValues is all the allowed values of Paymentservicetypevalues enum
var AllowedPaymentservicetypevaluesEnumValues = []Paymentservicetypevalues{
	"CreditTransferService",
	"StandingOrderService",
	"DirectDebitService",
	"CardPaymentService",
	"WithdrawService",
	"DepositService",
	"OverdraftService",
	"MoneyRemittanceService",
	"StatementService",
}

// validPaymentservicetypevaluesEnumValue provides a map of Paymentservicetypevaluess for fast verification of use input
var validPaymentservicetypevaluesEnumValues = map[Paymentservicetypevalues]struct{}{
	"CreditTransferService": {},
	"StandingOrderService": {},
	"DirectDebitService": {},
	"CardPaymentService": {},
	"WithdrawService": {},
	"DepositService": {},
	"OverdraftService": {},
	"MoneyRemittanceService": {},
	"StatementService": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentservicetypevalues) IsValid() bool {
	_, ok := validPaymentservicetypevaluesEnumValues[v]
	return ok
}

// NewPaymentservicetypevaluesFromValue returns a pointer to a valid Paymentservicetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentservicetypevaluesFromValue(v string) (Paymentservicetypevalues, error) {
	ev := Paymentservicetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentservicetypevalues: valid values are %v", v, AllowedPaymentservicetypevaluesEnumValues)
}



// AssertPaymentservicetypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentservicetypevaluesRequired(obj Paymentservicetypevalues) error {
	return nil
}

// AssertPaymentservicetypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentservicetypevaluesConstraints(obj Paymentservicetypevalues) error {
	return nil
}
