// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Payments - The product features/services available with a financical facility
type Payments struct {

	PaymentSchedule Schedule `json:"PaymentSchedule,omitempty"`

	PaymentTransactionDateType Paymentdatetimetypevalues `json:"PaymentTransactionDateType,omitempty"`

	PaymentInvolvementType Paymentinvolvementtypevalues `json:"PaymentInvolvementType,omitempty"`

	PaymentTransactionPayeeReference Involvedparty `json:"PaymentTransactionPayeeReference,omitempty"`

	PaymentTransactionPayeeBankReference Involvedparty `json:"PaymentTransactionPayeeBankReference,omitempty"`

	DirectDebitMandateReference Directdebitmandate `json:"DirectDebitMandateReference,omitempty"`

	PaymentInvolvedPartyReference Party `json:"PaymentInvolvedPartyReference,omitempty"`

	PaymentConfiguration Paymentarrangement `json:"PaymentConfiguration,omitempty"`

	PaymentTransactionPayeeAccountReference Account `json:"PaymentTransactionPayeeAccountReference,omitempty"`

	PaymentTransaction Paymenttransaction `json:"PaymentTransaction,omitempty"`

	PaymentProcessinngOptionDefinition Paymentprocessingarrangementmodality `json:"PaymentProcessinngOptionDefinition,omitempty"`

	PaymentTransactionFeeType Feetypevalues `json:"PaymentTransactionFeeType,omitempty"`

	PaymentTransactionFeeCharge Amount `json:"PaymentTransactionFeeCharge,omitempty"`

	PaymentTransactionPaymentPurpose Paymentpurposevalues `json:"PaymentTransactionPaymentPurpose,omitempty"`

	PaymentType Paymenttypevalues `json:"PaymentType,omitempty"`

	PaymentDefinition Text `json:"PaymentDefinition,omitempty"`

	PaymentTransactionDate Datetime `json:"PaymentTransactionDate,omitempty"`

	PaymentTransactionType Paymenttypevalues `json:"PaymentTransactionType,omitempty"`

	DirectDebitMandateSettings Directdebitmandatearrangement `json:"DirectDebitMandateSettings,omitempty"`

	PaymentTransactionPaymentMechanism Text `json:"PaymentTransactionPaymentMechanism,omitempty"`

	PaymentTransactionBankBranchLocationReference Location `json:"PaymentTransactionBankBranchLocationReference,omitempty"`

	PaymentProcessingOptionSetting Paymentprocessingarrangementmodality `json:"PaymentProcessingOptionSetting,omitempty"`

	BilPayMandateSettings Billpaymandatefacilityarrangement `json:"BilPayMandateSettings,omitempty"`

	PaymentTransactionStatus Paymenttransactionstatustypevalues `json:"PaymentTransactionStatus,omitempty"`

	PaymentTransactionAmount Amount `json:"PaymentTransactionAmount,omitempty"`

	BillPayMandateReference Billpaymandate `json:"BillPayMandateReference,omitempty"`
}

// AssertPaymentsRequired checks if the required fields are not zero-ed
func AssertPaymentsRequired(obj Payments) error {
	if err := AssertScheduleRequired(obj.PaymentSchedule); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.PaymentTransactionPayeeReference); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.PaymentTransactionPayeeBankReference); err != nil {
		return err
	}
	if err := AssertDirectdebitmandateRequired(obj.DirectDebitMandateReference); err != nil {
		return err
	}
	if err := AssertPartyRequired(obj.PaymentInvolvedPartyReference); err != nil {
		return err
	}
	if err := AssertPaymentarrangementRequired(obj.PaymentConfiguration); err != nil {
		return err
	}
	if err := AssertAccountRequired(obj.PaymentTransactionPayeeAccountReference); err != nil {
		return err
	}
	if err := AssertPaymenttransactionRequired(obj.PaymentTransaction); err != nil {
		return err
	}
	if err := AssertPaymentprocessingarrangementmodalityRequired(obj.PaymentProcessinngOptionDefinition); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.PaymentTransactionFeeCharge); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.PaymentDefinition); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.PaymentTransactionDate); err != nil {
		return err
	}
	if err := AssertDirectdebitmandatearrangementRequired(obj.DirectDebitMandateSettings); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.PaymentTransactionPaymentMechanism); err != nil {
		return err
	}
	if err := AssertLocationRequired(obj.PaymentTransactionBankBranchLocationReference); err != nil {
		return err
	}
	if err := AssertPaymentprocessingarrangementmodalityRequired(obj.PaymentProcessingOptionSetting); err != nil {
		return err
	}
	if err := AssertBillpaymandatefacilityarrangementRequired(obj.BilPayMandateSettings); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.PaymentTransactionAmount); err != nil {
		return err
	}
	if err := AssertBillpaymandateRequired(obj.BillPayMandateReference); err != nil {
		return err
	}
	return nil
}

// AssertPaymentsConstraints checks if the values respects the defined constraints
func AssertPaymentsConstraints(obj Payments) error {
	if err := AssertScheduleConstraints(obj.PaymentSchedule); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.PaymentTransactionPayeeReference); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.PaymentTransactionPayeeBankReference); err != nil {
		return err
	}
	if err := AssertDirectdebitmandateConstraints(obj.DirectDebitMandateReference); err != nil {
		return err
	}
	if err := AssertPartyConstraints(obj.PaymentInvolvedPartyReference); err != nil {
		return err
	}
	if err := AssertPaymentarrangementConstraints(obj.PaymentConfiguration); err != nil {
		return err
	}
	if err := AssertAccountConstraints(obj.PaymentTransactionPayeeAccountReference); err != nil {
		return err
	}
	if err := AssertPaymenttransactionConstraints(obj.PaymentTransaction); err != nil {
		return err
	}
	if err := AssertPaymentprocessingarrangementmodalityConstraints(obj.PaymentProcessinngOptionDefinition); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.PaymentTransactionFeeCharge); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.PaymentDefinition); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.PaymentTransactionDate); err != nil {
		return err
	}
	if err := AssertDirectdebitmandatearrangementConstraints(obj.DirectDebitMandateSettings); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.PaymentTransactionPaymentMechanism); err != nil {
		return err
	}
	if err := AssertLocationConstraints(obj.PaymentTransactionBankBranchLocationReference); err != nil {
		return err
	}
	if err := AssertPaymentprocessingarrangementmodalityConstraints(obj.PaymentProcessingOptionSetting); err != nil {
		return err
	}
	if err := AssertBillpaymandatefacilityarrangementConstraints(obj.BilPayMandateSettings); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.PaymentTransactionAmount); err != nil {
		return err
	}
	if err := AssertBillpaymandateConstraints(obj.BillPayMandateReference); err != nil {
		return err
	}
	return nil
}
