// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Currencytypevalues : >  * `BaseCurrency` - Base currency of the account. (ISO20022)   * `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)   * `SecondaryCurrency` -   * `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)  
type Currencytypevalues string

// List of Currencytypevalues
const (
	BASE_CURRENCY Currencytypevalues = "BaseCurrency"
	REPORTING_CURRENCY Currencytypevalues = "ReportingCurrency"
	SECONDARY_CURRENCY Currencytypevalues = "SecondaryCurrency"
	TRANSFER_CURRENCY Currencytypevalues = "TransferCurrency"
)

// AllowedCurrencytypevaluesEnumValues is all the allowed values of Currencytypevalues enum
var AllowedCurrencytypevaluesEnumValues = []Currencytypevalues{
	"BaseCurrency",
	"ReportingCurrency",
	"SecondaryCurrency",
	"TransferCurrency",
}

// validCurrencytypevaluesEnumValue provides a map of Currencytypevaluess for fast verification of use input
var validCurrencytypevaluesEnumValues = map[Currencytypevalues]struct{}{
	"BaseCurrency": {},
	"ReportingCurrency": {},
	"SecondaryCurrency": {},
	"TransferCurrency": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Currencytypevalues) IsValid() bool {
	_, ok := validCurrencytypevaluesEnumValues[v]
	return ok
}

// NewCurrencytypevaluesFromValue returns a pointer to a valid Currencytypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencytypevaluesFromValue(v string) (Currencytypevalues, error) {
	ev := Currencytypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Currencytypevalues: valid values are %v", v, AllowedCurrencytypevaluesEnumValues)
}



// AssertCurrencytypevaluesRequired checks if the required fields are not zero-ed
func AssertCurrencytypevaluesRequired(obj Currencytypevalues) error {
	return nil
}

// AssertCurrencytypevaluesConstraints checks if the values respects the defined constraints
func AssertCurrencytypevaluesConstraints(obj Currencytypevalues) error {
	return nil
}
