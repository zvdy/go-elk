// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQLienAPIController binds http requests to an api service and writes the service results to the http response
type BQLienAPIController struct {
	service BQLienAPIServicer
	errorHandler ErrorHandler
}

// BQLienAPIOption for how the controller is set up.
type BQLienAPIOption func(*BQLienAPIController)

// WithBQLienAPIErrorHandler inject ErrorHandler into controller
func WithBQLienAPIErrorHandler(h ErrorHandler) BQLienAPIOption {
	return func(c *BQLienAPIController) {
		c.errorHandler = h
	}
}

// NewBQLienAPIController creates a default api controller
func NewBQLienAPIController(s BQLienAPIServicer, opts ...BQLienAPIOption) *BQLienAPIController {
	controller := &BQLienAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQLienAPIController
func (c *BQLienAPIController) Routes() Routes {
	return Routes{
		"ExchangeLien": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Lien/{lienid}/Exchange",
			c.ExchangeLien,
		},
		"InitiateLien": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Lien/Initiate",
			c.InitiateLien,
		},
		"RetrieveLien": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Lien/{lienid}/Retrieve",
			c.RetrieveLien,
		},
		"UpdateLien": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Lien/{lienid}/Update",
			c.UpdateLien,
		},
	}
}

// ExchangeLien - EcBQ Accept, verify, etc. aspects of Lien processing
func (c *BQLienAPIController) ExchangeLien(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	lienidParam := params["lienid"]
	if lienidParam == "" {
		c.errorHandler(w, r, &RequiredError{"lienid"}, nil)
		return
	}
	lienParam := Lien{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&lienParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLienRequired(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLienConstraints(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExchangeLien(r.Context(), leasingidParam, lienidParam, lienParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiateLien - InBQ Instantiate a new Lien
func (c *BQLienAPIController) InitiateLien(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	lienParam := Lien{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&lienParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLienRequired(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLienConstraints(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateLien(r.Context(), leasingidParam, lienParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveLien - ReBQ Retrieve details about any aspect of Lien
func (c *BQLienAPIController) RetrieveLien(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	lienidParam := params["lienid"]
	if lienidParam == "" {
		c.errorHandler(w, r, &RequiredError{"lienid"}, nil)
		return
	}
	result, err := c.service.RetrieveLien(r.Context(), leasingidParam, lienidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateLien - UpBQ Update details relating to Lien
func (c *BQLienAPIController) UpdateLien(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	lienidParam := params["lienid"]
	if lienidParam == "" {
		c.errorHandler(w, r, &RequiredError{"lienid"}, nil)
		return
	}
	lienParam := Lien{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&lienParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLienRequired(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLienConstraints(lienParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateLien(r.Context(), leasingidParam, lienidParam, lienParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
