// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Interestratetypevalues : >  * `Fixed` - Rate is fixed.  * `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.  * `Variable` - Rate is variable.  * `Scheduled` - Rate of the scheduled payment.  * `Unscheduled` - Rate of the unscheduled payment.  * `Discount` - Interest rate type is Discount.  * `Fixedrateunderlyingexposureforlife` - Interest rate type is Fixed rate underlying exposure (for life).  * `Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating` - Interest rate type is Fixed rate underlying exposure with compulsory future switch to floating.  * `Fixedwithfutureperiodicresets` - Interest rate type is Fixed with future periodic resets.  * `Floatinglinkedtoindex` - Interest rate type is Floating rate underlying exposure linked to one index that will revert to another index in the future.  * `Floatingrateunderlyingexposureforlife` - Interest rate type is Floating rate underlying exposure (for life).  * `Floatingrateunderlyingexposurewithcap` - Interest rate type is Floating rate underlying exposure with cap.  * `Floatingrateunderlyingexposurewithfloor` - Interest rate type is Floating rate underlying exposure with floor.  * `Floatingrateunderlyingexposurewithfloorandcap` - Interest rate type is Floating rate underlying exposure with both floor and cap.  * `Modular` - Interest rate type is Modular.  * `Obligorswapped` - Interest rate type is Obligor Swapped.  * `Other` - Any other type of interest rate that can be applied.  * `Swicthoptionality` - Interest rate type is Switch Optionality.  
type Interestratetypevalues string

// List of Interestratetypevalues
const (
	FIXED Interestratetypevalues = "Fixed"
	FORFEIT Interestratetypevalues = "Forfeit"
	VARIABLE Interestratetypevalues = "Variable"
	SCHEDULED Interestratetypevalues = "Scheduled"
	UNSCHEDULED Interestratetypevalues = "Unscheduled"
	DISCOUNT Interestratetypevalues = "Discount"
	FIXEDRATEUNDERLYINGEXPOSUREFORLIFE Interestratetypevalues = "Fixedrateunderlyingexposureforlife"
	FIXEDRATEUNDERLYINGEXPOSUREWITHCOMPULSORYFUTURESWITCHTOFLOATING Interestratetypevalues = "Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating"
	FIXEDWITHFUTUREPERIODICRESETS Interestratetypevalues = "Fixedwithfutureperiodicresets"
	FLOATINGLINKEDTOINDEX Interestratetypevalues = "Floatinglinkedtoindex"
	FLOATINGRATEUNDERLYINGEXPOSUREFORLIFE Interestratetypevalues = "Floatingrateunderlyingexposureforlife"
	FLOATINGRATEUNDERLYINGEXPOSUREWITHCAP Interestratetypevalues = "Floatingrateunderlyingexposurewithcap"
	FLOATINGRATEUNDERLYINGEXPOSUREWITHFLOOR Interestratetypevalues = "Floatingrateunderlyingexposurewithfloor"
	FLOATINGRATEUNDERLYINGEXPOSUREWITHFLOORANDCAP Interestratetypevalues = "Floatingrateunderlyingexposurewithfloorandcap"
	MODULAR Interestratetypevalues = "Modular"
	OBLIGORSWAPPED Interestratetypevalues = "Obligorswapped"
	OTHER Interestratetypevalues = "Other"
	SWICTHOPTIONALITY Interestratetypevalues = "Swicthoptionality"
)

// AllowedInterestratetypevaluesEnumValues is all the allowed values of Interestratetypevalues enum
var AllowedInterestratetypevaluesEnumValues = []Interestratetypevalues{
	"Fixed",
	"Forfeit",
	"Variable",
	"Scheduled",
	"Unscheduled",
	"Discount",
	"Fixedrateunderlyingexposureforlife",
	"Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating",
	"Fixedwithfutureperiodicresets",
	"Floatinglinkedtoindex",
	"Floatingrateunderlyingexposureforlife",
	"Floatingrateunderlyingexposurewithcap",
	"Floatingrateunderlyingexposurewithfloor",
	"Floatingrateunderlyingexposurewithfloorandcap",
	"Modular",
	"Obligorswapped",
	"Other",
	"Swicthoptionality",
}

// validInterestratetypevaluesEnumValue provides a map of Interestratetypevaluess for fast verification of use input
var validInterestratetypevaluesEnumValues = map[Interestratetypevalues]struct{}{
	"Fixed": {},
	"Forfeit": {},
	"Variable": {},
	"Scheduled": {},
	"Unscheduled": {},
	"Discount": {},
	"Fixedrateunderlyingexposureforlife": {},
	"Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating": {},
	"Fixedwithfutureperiodicresets": {},
	"Floatinglinkedtoindex": {},
	"Floatingrateunderlyingexposureforlife": {},
	"Floatingrateunderlyingexposurewithcap": {},
	"Floatingrateunderlyingexposurewithfloor": {},
	"Floatingrateunderlyingexposurewithfloorandcap": {},
	"Modular": {},
	"Obligorswapped": {},
	"Other": {},
	"Swicthoptionality": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Interestratetypevalues) IsValid() bool {
	_, ok := validInterestratetypevaluesEnumValues[v]
	return ok
}

// NewInterestratetypevaluesFromValue returns a pointer to a valid Interestratetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterestratetypevaluesFromValue(v string) (Interestratetypevalues, error) {
	ev := Interestratetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Interestratetypevalues: valid values are %v", v, AllowedInterestratetypevaluesEnumValues)
}



// AssertInterestratetypevaluesRequired checks if the required fields are not zero-ed
func AssertInterestratetypevaluesRequired(obj Interestratetypevalues) error {
	return nil
}

// AssertInterestratetypevaluesConstraints checks if the values respects the defined constraints
func AssertInterestratetypevaluesConstraints(obj Interestratetypevalues) error {
	return nil
}
