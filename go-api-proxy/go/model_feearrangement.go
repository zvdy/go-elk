// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Feearrangement - Specifies the charges on interest.
type Feearrangement struct {

	FeeType Feetypevalues `json:"FeeType,omitempty"`

	FeeAmount Amount `json:"FeeAmount,omitempty"`

	FeeRate Rate `json:"FeeRate,omitempty"`

	FeeEffectivePeriod Datetimeperiod `json:"FeeEffectivePeriod,omitempty"`

	FeeDueDate Datetime `json:"FeeDueDate,omitempty"`

	FeePlan Feeplan `json:"FeePlan,omitempty"`

	FeeCreditDebitIndicator Debitcreditindicatortvalues `json:"FeeCreditDebitIndicator,omitempty"`

	FeeReason Text `json:"FeeReason,omitempty"`

	FeeDirection Adjustmentdirectiontypevalues `json:"FeeDirection,omitempty"`

	FeeBearerType Chargebearertypevalues `json:"FeeBearerType,omitempty"`
}

// AssertFeearrangementRequired checks if the required fields are not zero-ed
func AssertFeearrangementRequired(obj Feearrangement) error {
	if err := AssertAmountRequired(obj.FeeAmount); err != nil {
		return err
	}
	if err := AssertRateRequired(obj.FeeRate); err != nil {
		return err
	}
	if err := AssertDatetimeperiodRequired(obj.FeeEffectivePeriod); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.FeeDueDate); err != nil {
		return err
	}
	if err := AssertFeeplanRequired(obj.FeePlan); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.FeeReason); err != nil {
		return err
	}
	return nil
}

// AssertFeearrangementConstraints checks if the values respects the defined constraints
func AssertFeearrangementConstraints(obj Feearrangement) error {
	if err := AssertAmountConstraints(obj.FeeAmount); err != nil {
		return err
	}
	if err := AssertRateConstraints(obj.FeeRate); err != nil {
		return err
	}
	if err := AssertDatetimeperiodConstraints(obj.FeeEffectivePeriod); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.FeeDueDate); err != nil {
		return err
	}
	if err := AssertFeeplanConstraints(obj.FeePlan); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.FeeReason); err != nil {
		return err
	}
	return nil
}
