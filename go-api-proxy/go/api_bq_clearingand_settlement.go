// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQClearingandSettlementAPIController binds http requests to an api service and writes the service results to the http response
type BQClearingandSettlementAPIController struct {
	service BQClearingandSettlementAPIServicer
	errorHandler ErrorHandler
}

// BQClearingandSettlementAPIOption for how the controller is set up.
type BQClearingandSettlementAPIOption func(*BQClearingandSettlementAPIController)

// WithBQClearingandSettlementAPIErrorHandler inject ErrorHandler into controller
func WithBQClearingandSettlementAPIErrorHandler(h ErrorHandler) BQClearingandSettlementAPIOption {
	return func(c *BQClearingandSettlementAPIController) {
		c.errorHandler = h
	}
}

// NewBQClearingandSettlementAPIController creates a default api controller
func NewBQClearingandSettlementAPIController(s BQClearingandSettlementAPIServicer, opts ...BQClearingandSettlementAPIOption) *BQClearingandSettlementAPIController {
	controller := &BQClearingandSettlementAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQClearingandSettlementAPIController
func (c *BQClearingandSettlementAPIController) Routes() Routes {
	return Routes{
		"RetrieveClearingandSettlement": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/ClearingandSettlement/{clearingandsettlementid}/Retrieve",
			c.RetrieveClearingandSettlement,
		},
		"UpdateClearingandSettlement": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/ClearingandSettlement/{clearingandsettlementid}/Update",
			c.UpdateClearingandSettlement,
		},
	}
}

// RetrieveClearingandSettlement - ReBQ Retrieve details about any aspect of Clearing and Settlement
func (c *BQClearingandSettlementAPIController) RetrieveClearingandSettlement(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	clearingandsettlementidParam := params["clearingandsettlementid"]
	if clearingandsettlementidParam == "" {
		c.errorHandler(w, r, &RequiredError{"clearingandsettlementid"}, nil)
		return
	}
	result, err := c.service.RetrieveClearingandSettlement(r.Context(), leasingidParam, clearingandsettlementidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateClearingandSettlement - UpBQ Update details relating to Clearing and Settlement
func (c *BQClearingandSettlementAPIController) UpdateClearingandSettlement(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	clearingandsettlementidParam := params["clearingandsettlementid"]
	if clearingandsettlementidParam == "" {
		c.errorHandler(w, r, &RequiredError{"clearingandsettlementid"}, nil)
		return
	}
	clearingandSettlementParam := ClearingandSettlement{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clearingandSettlementParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClearingandSettlementRequired(clearingandSettlementParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClearingandSettlementConstraints(clearingandSettlementParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateClearingandSettlement(r.Context(), leasingidParam, clearingandsettlementidParam, clearingandSettlementParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
