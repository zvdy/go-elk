// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentsequencetypevalues : >  * `First` - First collection of a series of direct debit instructions.  * `Recurring` - Direct debit instruction where the debtor's authorisation is used for regular direct debit transactions initiated by the creditor.  * `Final` - Final collection of a series of direct debit instructions.  * `Oneoff` - Direct debit instruction where the debtor's authorisation is used to initiate one single direct debit transaction.  * `Represented` - Collection used to re-present previously reversed or returned direct debit transactions.  
type Paymentsequencetypevalues string

// List of Paymentsequencetypevalues
const (
	FIRST Paymentsequencetypevalues = "First"
	RECURRING Paymentsequencetypevalues = "Recurring"
	FINAL Paymentsequencetypevalues = "Final"
	ONEOFF Paymentsequencetypevalues = "Oneoff"
	REPRESENTED Paymentsequencetypevalues = "Represented"
)

// AllowedPaymentsequencetypevaluesEnumValues is all the allowed values of Paymentsequencetypevalues enum
var AllowedPaymentsequencetypevaluesEnumValues = []Paymentsequencetypevalues{
	"First",
	"Recurring",
	"Final",
	"Oneoff",
	"Represented",
}

// validPaymentsequencetypevaluesEnumValue provides a map of Paymentsequencetypevaluess for fast verification of use input
var validPaymentsequencetypevaluesEnumValues = map[Paymentsequencetypevalues]struct{}{
	"First": {},
	"Recurring": {},
	"Final": {},
	"Oneoff": {},
	"Represented": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentsequencetypevalues) IsValid() bool {
	_, ok := validPaymentsequencetypevaluesEnumValues[v]
	return ok
}

// NewPaymentsequencetypevaluesFromValue returns a pointer to a valid Paymentsequencetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentsequencetypevaluesFromValue(v string) (Paymentsequencetypevalues, error) {
	ev := Paymentsequencetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentsequencetypevalues: valid values are %v", v, AllowedPaymentsequencetypevaluesEnumValues)
}



// AssertPaymentsequencetypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentsequencetypevaluesRequired(obj Paymentsequencetypevalues) error {
	return nil
}

// AssertPaymentsequencetypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentsequencetypevaluesConstraints(obj Paymentsequencetypevalues) error {
	return nil
}
