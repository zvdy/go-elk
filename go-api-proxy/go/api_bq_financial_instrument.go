// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQFinancialInstrumentAPIController binds http requests to an api service and writes the service results to the http response
type BQFinancialInstrumentAPIController struct {
	service BQFinancialInstrumentAPIServicer
	errorHandler ErrorHandler
}

// BQFinancialInstrumentAPIOption for how the controller is set up.
type BQFinancialInstrumentAPIOption func(*BQFinancialInstrumentAPIController)

// WithBQFinancialInstrumentAPIErrorHandler inject ErrorHandler into controller
func WithBQFinancialInstrumentAPIErrorHandler(h ErrorHandler) BQFinancialInstrumentAPIOption {
	return func(c *BQFinancialInstrumentAPIController) {
		c.errorHandler = h
	}
}

// NewBQFinancialInstrumentAPIController creates a default api controller
func NewBQFinancialInstrumentAPIController(s BQFinancialInstrumentAPIServicer, opts ...BQFinancialInstrumentAPIOption) *BQFinancialInstrumentAPIController {
	controller := &BQFinancialInstrumentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQFinancialInstrumentAPIController
func (c *BQFinancialInstrumentAPIController) Routes() Routes {
	return Routes{
		"InitiateFinancialInstrument": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/FinancialInstrument/Initiate",
			c.InitiateFinancialInstrument,
		},
		"RetrieveFinancialInstrument": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/FinancialInstrument/{financialinstrumentid}/Retrieve",
			c.RetrieveFinancialInstrument,
		},
		"UpdateFinancialInstrument": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/FinancialInstrument/{financialinstrumentid}/Update",
			c.UpdateFinancialInstrument,
		},
	}
}

// InitiateFinancialInstrument - InBQ Instantiate a new Financial Instrument
func (c *BQFinancialInstrumentAPIController) InitiateFinancialInstrument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	financialInstrumentParam := FinancialInstrument{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&financialInstrumentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFinancialInstrumentRequired(financialInstrumentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFinancialInstrumentConstraints(financialInstrumentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateFinancialInstrument(r.Context(), leasingidParam, financialInstrumentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveFinancialInstrument - ReBQ Retrieve details about any aspect of Financial Instrument
func (c *BQFinancialInstrumentAPIController) RetrieveFinancialInstrument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	financialinstrumentidParam := params["financialinstrumentid"]
	if financialinstrumentidParam == "" {
		c.errorHandler(w, r, &RequiredError{"financialinstrumentid"}, nil)
		return
	}
	result, err := c.service.RetrieveFinancialInstrument(r.Context(), leasingidParam, financialinstrumentidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFinancialInstrument - UpBQ Update details relating to Financial Instrument
func (c *BQFinancialInstrumentAPIController) UpdateFinancialInstrument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	financialinstrumentidParam := params["financialinstrumentid"]
	if financialinstrumentidParam == "" {
		c.errorHandler(w, r, &RequiredError{"financialinstrumentid"}, nil)
		return
	}
	financialInstrumentParam := FinancialInstrument{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&financialInstrumentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFinancialInstrumentRequired(financialInstrumentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFinancialInstrumentConstraints(financialInstrumentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateFinancialInstrument(r.Context(), leasingidParam, financialinstrumentidParam, financialInstrumentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
