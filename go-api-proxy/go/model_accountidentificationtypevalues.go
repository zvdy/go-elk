// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Accountidentificationtypevalues : >  * `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)  .  * `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)  An identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)  * `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)  * `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)  Sort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (OBExternalAccountIdentification4Code) The regular expression for this identifier is: ^[0-9]{6}[0-9]{8}$  * `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)  * `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)  * `Wallet` - A primary and unique account identifier used to identify a wallet. An ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)  
type Accountidentificationtypevalues string

// List of Accountidentificationtypevalues
const (
	BBAN Accountidentificationtypevalues = "BBAN"
	IBAN Accountidentificationtypevalues = "IBAN"
	UPIC Accountidentificationtypevalues = "UPIC"
	ACCOUNT_NUMBER Accountidentificationtypevalues = "AccountNumber"
	PAN Accountidentificationtypevalues = "PAN"
	PAYM Accountidentificationtypevalues = "Paym"
	WALLET Accountidentificationtypevalues = "Wallet"
)

// AllowedAccountidentificationtypevaluesEnumValues is all the allowed values of Accountidentificationtypevalues enum
var AllowedAccountidentificationtypevaluesEnumValues = []Accountidentificationtypevalues{
	"BBAN",
	"IBAN",
	"UPIC",
	"AccountNumber",
	"PAN",
	"Paym",
	"Wallet",
}

// validAccountidentificationtypevaluesEnumValue provides a map of Accountidentificationtypevaluess for fast verification of use input
var validAccountidentificationtypevaluesEnumValues = map[Accountidentificationtypevalues]struct{}{
	"BBAN": {},
	"IBAN": {},
	"UPIC": {},
	"AccountNumber": {},
	"PAN": {},
	"Paym": {},
	"Wallet": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Accountidentificationtypevalues) IsValid() bool {
	_, ok := validAccountidentificationtypevaluesEnumValues[v]
	return ok
}

// NewAccountidentificationtypevaluesFromValue returns a pointer to a valid Accountidentificationtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountidentificationtypevaluesFromValue(v string) (Accountidentificationtypevalues, error) {
	ev := Accountidentificationtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Accountidentificationtypevalues: valid values are %v", v, AllowedAccountidentificationtypevaluesEnumValues)
}



// AssertAccountidentificationtypevaluesRequired checks if the required fields are not zero-ed
func AssertAccountidentificationtypevaluesRequired(obj Accountidentificationtypevalues) error {
	return nil
}

// AssertAccountidentificationtypevaluesConstraints checks if the values respects the defined constraints
func AssertAccountidentificationtypevaluesConstraints(obj Accountidentificationtypevalues) error {
	return nil
}
