// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentmethodtypevalues : >  * `Cheque` - Written order to a bank to pay a certain amount of money from one person to another person.  * `Credittransfer` - Transfer of an amount of money in the books of the account servicer.  * `Directdebit` - Collection of an amount of money from the debtor's bank account by the creditor. The amount of money and dates of collections may vary.  * `Transferadvice` - Transfer of an amount of money in the books of the account servicer. An advice should be sent back to the account owner.  * `Direct` - Direct method.  * `Classical` - Classical method.  
type Paymentmethodtypevalues string

// List of Paymentmethodtypevalues
const (
	CHEQUE Paymentmethodtypevalues = "Cheque"
	CREDITTRANSFER Paymentmethodtypevalues = "Credittransfer"
	DIRECTDEBIT Paymentmethodtypevalues = "Directdebit"
	TRANSFERADVICE Paymentmethodtypevalues = "Transferadvice"
	DIRECT Paymentmethodtypevalues = "Direct"
	CLASSICAL Paymentmethodtypevalues = "Classical"
)

// AllowedPaymentmethodtypevaluesEnumValues is all the allowed values of Paymentmethodtypevalues enum
var AllowedPaymentmethodtypevaluesEnumValues = []Paymentmethodtypevalues{
	"Cheque",
	"Credittransfer",
	"Directdebit",
	"Transferadvice",
	"Direct",
	"Classical",
}

// validPaymentmethodtypevaluesEnumValue provides a map of Paymentmethodtypevaluess for fast verification of use input
var validPaymentmethodtypevaluesEnumValues = map[Paymentmethodtypevalues]struct{}{
	"Cheque": {},
	"Credittransfer": {},
	"Directdebit": {},
	"Transferadvice": {},
	"Direct": {},
	"Classical": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentmethodtypevalues) IsValid() bool {
	_, ok := validPaymentmethodtypevaluesEnumValues[v]
	return ok
}

// NewPaymentmethodtypevaluesFromValue returns a pointer to a valid Paymentmethodtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentmethodtypevaluesFromValue(v string) (Paymentmethodtypevalues, error) {
	ev := Paymentmethodtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentmethodtypevalues: valid values are %v", v, AllowedPaymentmethodtypevaluesEnumValues)
}



// AssertPaymentmethodtypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentmethodtypevaluesRequired(obj Paymentmethodtypevalues) error {
	return nil
}

// AssertPaymentmethodtypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentmethodtypevaluesConstraints(obj Paymentmethodtypevalues) error {
	return nil
}
