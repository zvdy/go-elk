// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Taxarrangement - Specifies the tax on interest
type Taxarrangement struct {

	TaxType Taxtypevalues `json:"TaxType,omitempty"`

	TaxAmount Amount `json:"TaxAmount,omitempty"`

	TaxRate Rate `json:"TaxRate,omitempty"`

	TaxRateType Ratetypevalues `json:"TaxRateType,omitempty"`

	PlaceOfTaxation Location `json:"PlaceOfTaxation,omitempty"`

	TaxableParty Involvedparty `json:"TaxableParty,omitempty"`

	TaxAccount Account `json:"TaxAccount,omitempty"`

	TaxationCondition Condition `json:"TaxationCondition,omitempty"`

	TaxCurrency Currencycode `json:"TaxCurrency,omitempty"`

	TaxDueDate Datetime `json:"TaxDueDate,omitempty"`

	TaxCalculationDate Datetime `json:"TaxCalculationDate,omitempty"`

	TaxPayer Involvedparty `json:"TaxPayer,omitempty"`

	TaxRecipient Involvedparty `json:"TaxRecipient,omitempty"`
}

// AssertTaxarrangementRequired checks if the required fields are not zero-ed
func AssertTaxarrangementRequired(obj Taxarrangement) error {
	if err := AssertAmountRequired(obj.TaxAmount); err != nil {
		return err
	}
	if err := AssertRateRequired(obj.TaxRate); err != nil {
		return err
	}
	if err := AssertLocationRequired(obj.PlaceOfTaxation); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.TaxableParty); err != nil {
		return err
	}
	if err := AssertAccountRequired(obj.TaxAccount); err != nil {
		return err
	}
	if err := AssertConditionRequired(obj.TaxationCondition); err != nil {
		return err
	}
	if err := AssertCurrencycodeRequired(obj.TaxCurrency); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.TaxDueDate); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.TaxCalculationDate); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.TaxPayer); err != nil {
		return err
	}
	if err := AssertInvolvedpartyRequired(obj.TaxRecipient); err != nil {
		return err
	}
	return nil
}

// AssertTaxarrangementConstraints checks if the values respects the defined constraints
func AssertTaxarrangementConstraints(obj Taxarrangement) error {
	if err := AssertAmountConstraints(obj.TaxAmount); err != nil {
		return err
	}
	if err := AssertRateConstraints(obj.TaxRate); err != nil {
		return err
	}
	if err := AssertLocationConstraints(obj.PlaceOfTaxation); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.TaxableParty); err != nil {
		return err
	}
	if err := AssertAccountConstraints(obj.TaxAccount); err != nil {
		return err
	}
	if err := AssertConditionConstraints(obj.TaxationCondition); err != nil {
		return err
	}
	if err := AssertCurrencycodeConstraints(obj.TaxCurrency); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.TaxDueDate); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.TaxCalculationDate); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.TaxPayer); err != nil {
		return err
	}
	if err := AssertInvolvedpartyConstraints(obj.TaxRecipient); err != nil {
		return err
	}
	return nil
}
