// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Amounttypevalues : >  * `Principal` -   * `Actual` - Actual amount.  * `Estimated` - Estimated amount (the final amount could be above or below).  * `Maximum` - Maximum amount (the final amount must be less or equal).  * `Default` - Default amount.  * `Replacement` - Replacement amount.  * `Incremental` - Incremental amount for reservation.  * `Decremental` - Decremental amount for reservation.  * `Reserved` - Reserved or updated reserved amount for reservation.  * `Available` -   * `Used` -   
type Amounttypevalues string

// List of Amounttypevalues
const (
	PRINCIPAL Amounttypevalues = "Principal"
	ACTUAL Amounttypevalues = "Actual"
	ESTIMATED Amounttypevalues = "Estimated"
	MAXIMUM Amounttypevalues = "Maximum"
	DEFAULT Amounttypevalues = "Default"
	REPLACEMENT Amounttypevalues = "Replacement"
	INCREMENTAL Amounttypevalues = "Incremental"
	DECREMENTAL Amounttypevalues = "Decremental"
	RESERVED Amounttypevalues = "Reserved"
	AVAILABLE Amounttypevalues = "Available"
	USED Amounttypevalues = "Used"
)

// AllowedAmounttypevaluesEnumValues is all the allowed values of Amounttypevalues enum
var AllowedAmounttypevaluesEnumValues = []Amounttypevalues{
	"Principal",
	"Actual",
	"Estimated",
	"Maximum",
	"Default",
	"Replacement",
	"Incremental",
	"Decremental",
	"Reserved",
	"Available",
	"Used",
}

// validAmounttypevaluesEnumValue provides a map of Amounttypevaluess for fast verification of use input
var validAmounttypevaluesEnumValues = map[Amounttypevalues]struct{}{
	"Principal": {},
	"Actual": {},
	"Estimated": {},
	"Maximum": {},
	"Default": {},
	"Replacement": {},
	"Incremental": {},
	"Decremental": {},
	"Reserved": {},
	"Available": {},
	"Used": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Amounttypevalues) IsValid() bool {
	_, ok := validAmounttypevaluesEnumValues[v]
	return ok
}

// NewAmounttypevaluesFromValue returns a pointer to a valid Amounttypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmounttypevaluesFromValue(v string) (Amounttypevalues, error) {
	ev := Amounttypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Amounttypevalues: valid values are %v", v, AllowedAmounttypevaluesEnumValues)
}



// AssertAmounttypevaluesRequired checks if the required fields are not zero-ed
func AssertAmounttypevaluesRequired(obj Amounttypevalues) error {
	return nil
}

// AssertAmounttypevaluesConstraints checks if the values respects the defined constraints
func AssertAmounttypevaluesConstraints(obj Amounttypevalues) error {
	return nil
}
