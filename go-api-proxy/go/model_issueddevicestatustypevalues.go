// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Issueddevicestatustypevalues : >  * `Issued` -   * `IssuedButNotActivated` -   * `Activated` -   * `Suspended` -   * `Retrieved` -   
type Issueddevicestatustypevalues string

// List of Issueddevicestatustypevalues
const (
	ISSUED Issueddevicestatustypevalues = "Issued"
	ISSUED_BUT_NOT_ACTIVATED Issueddevicestatustypevalues = "IssuedButNotActivated"
	ACTIVATED Issueddevicestatustypevalues = "Activated"
	SUSPENDED Issueddevicestatustypevalues = "Suspended"
	RETRIEVED Issueddevicestatustypevalues = "Retrieved"
)

// AllowedIssueddevicestatustypevaluesEnumValues is all the allowed values of Issueddevicestatustypevalues enum
var AllowedIssueddevicestatustypevaluesEnumValues = []Issueddevicestatustypevalues{
	"Issued",
	"IssuedButNotActivated",
	"Activated",
	"Suspended",
	"Retrieved",
}

// validIssueddevicestatustypevaluesEnumValue provides a map of Issueddevicestatustypevaluess for fast verification of use input
var validIssueddevicestatustypevaluesEnumValues = map[Issueddevicestatustypevalues]struct{}{
	"Issued": {},
	"IssuedButNotActivated": {},
	"Activated": {},
	"Suspended": {},
	"Retrieved": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Issueddevicestatustypevalues) IsValid() bool {
	_, ok := validIssueddevicestatustypevaluesEnumValues[v]
	return ok
}

// NewIssueddevicestatustypevaluesFromValue returns a pointer to a valid Issueddevicestatustypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIssueddevicestatustypevaluesFromValue(v string) (Issueddevicestatustypevalues, error) {
	ev := Issueddevicestatustypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Issueddevicestatustypevalues: valid values are %v", v, AllowedIssueddevicestatustypevaluesEnumValues)
}



// AssertIssueddevicestatustypevaluesRequired checks if the required fields are not zero-ed
func AssertIssueddevicestatustypevaluesRequired(obj Issueddevicestatustypevalues) error {
	return nil
}

// AssertIssueddevicestatustypevaluesConstraints checks if the values respects the defined constraints
func AssertIssueddevicestatustypevaluesConstraints(obj Issueddevicestatustypevalues) error {
	return nil
}
