// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQFeesAPIController binds http requests to an api service and writes the service results to the http response
type BQFeesAPIController struct {
	service BQFeesAPIServicer
	errorHandler ErrorHandler
}

// BQFeesAPIOption for how the controller is set up.
type BQFeesAPIOption func(*BQFeesAPIController)

// WithBQFeesAPIErrorHandler inject ErrorHandler into controller
func WithBQFeesAPIErrorHandler(h ErrorHandler) BQFeesAPIOption {
	return func(c *BQFeesAPIController) {
		c.errorHandler = h
	}
}

// NewBQFeesAPIController creates a default api controller
func NewBQFeesAPIController(s BQFeesAPIServicer, opts ...BQFeesAPIOption) *BQFeesAPIController {
	controller := &BQFeesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQFeesAPIController
func (c *BQFeesAPIController) Routes() Routes {
	return Routes{
		"ExchangeFees": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Fees/{feesid}/Exchange",
			c.ExchangeFees,
		},
		"InitiateFees": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Fees/Initiate",
			c.InitiateFees,
		},
		"RetrieveFees": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Fees/{feesid}/Retrieve",
			c.RetrieveFees,
		},
		"RequestFees": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Fees/{feesid}/Request",
			c.RequestFees,
		},
		"UpdateFees": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Fees/{feesid}/Update",
			c.UpdateFees,
		},
	}
}

// ExchangeFees - EcBQ Accept, verify, etc. aspects of Fees processing
func (c *BQFeesAPIController) ExchangeFees(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	feesidParam := params["feesid"]
	if feesidParam == "" {
		c.errorHandler(w, r, &RequiredError{"feesid"}, nil)
		return
	}
	feesParam := Fees{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&feesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeesRequired(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeesConstraints(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExchangeFees(r.Context(), leasingidParam, feesidParam, feesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// InitiateFees - InBQ Instantiate a new Fees
func (c *BQFeesAPIController) InitiateFees(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	feesParam := Fees{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&feesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeesRequired(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeesConstraints(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateFees(r.Context(), leasingidParam, feesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveFees - ReBQ Retrieve details about any aspect of Fees
func (c *BQFeesAPIController) RetrieveFees(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	feesidParam := params["feesid"]
	if feesidParam == "" {
		c.errorHandler(w, r, &RequiredError{"feesid"}, nil)
		return
	}
	result, err := c.service.RetrieveFees(r.Context(), leasingidParam, feesidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestFees - RqBQ Request manual intervention or a decision with respect to Fees
func (c *BQFeesAPIController) RequestFees(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	feesidParam := params["feesid"]
	if feesidParam == "" {
		c.errorHandler(w, r, &RequiredError{"feesid"}, nil)
		return
	}
	feesParam := Fees{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&feesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeesRequired(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeesConstraints(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RequestFees(r.Context(), leasingidParam, feesidParam, feesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFees - UpBQ Update details relating to Fees
func (c *BQFeesAPIController) UpdateFees(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	feesidParam := params["feesid"]
	if feesidParam == "" {
		c.errorHandler(w, r, &RequiredError{"feesid"}, nil)
		return
	}
	feesParam := Fees{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&feesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFeesRequired(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFeesConstraints(feesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateFees(r.Context(), leasingidParam, feesidParam, feesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
