// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Partyidentificationtypevalues : >  * `Taxidentificationnumber` - Number assigned by a tax authority to an entity.  * `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)  * `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)  * `LEI(LegalEntityIdentifier)` -   * `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.  * `Passportnumber` - Number assigned by a passport authority.  * `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.  * `Corporateidentification` - Number assigned to a corporate entity.  * `Driverlicensenumber` - Number assigned to a driver's license.  * `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).  * `Socialsecuritynumber` - Number assigned by a social security agency.  * `Identitycardnumber` - Number assigned by a national authority to an identity card.  * `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.  * `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.  
type Partyidentificationtypevalues string

// List of Partyidentificationtypevalues
const (
	TAXIDENTIFICATIONNUMBER Partyidentificationtypevalues = "Taxidentificationnumber"
	NATIONALREGISTRATIONNUMBER Partyidentificationtypevalues = "Nationalregistrationnumber"
	REGISTRATIONAUTHORITYIDENTIFICATION Partyidentificationtypevalues = "Registrationauthorityidentification"
	LEI_LEGAL_ENTITY_IDENTIFIER Partyidentificationtypevalues = "LEI(LegalEntityIdentifier)"
	ALIENREGISTRATIONNUMBER Partyidentificationtypevalues = "Alienregistrationnumber"
	PASSPORTNUMBER Partyidentificationtypevalues = "Passportnumber"
	TAXEXEMPTIDENTIFICATIONNUMBER Partyidentificationtypevalues = "Taxexemptidentificationnumber"
	CORPORATEIDENTIFICATION Partyidentificationtypevalues = "Corporateidentification"
	DRIVERLICENSENUMBER Partyidentificationtypevalues = "Driverlicensenumber"
	FOREIGNINVESTMENTIDENTITYNUMBER Partyidentificationtypevalues = "Foreigninvestmentidentitynumber"
	SOCIALSECURITYNUMBER Partyidentificationtypevalues = "Socialsecuritynumber"
	IDENTITYCARDNUMBER Partyidentificationtypevalues = "Identitycardnumber"
	CONCAT Partyidentificationtypevalues = "Concat"
	NATIONALREGISTRATIONIDENTIFICATIONNUMBER Partyidentificationtypevalues = "Nationalregistrationidentificationnumber"
)

// AllowedPartyidentificationtypevaluesEnumValues is all the allowed values of Partyidentificationtypevalues enum
var AllowedPartyidentificationtypevaluesEnumValues = []Partyidentificationtypevalues{
	"Taxidentificationnumber",
	"Nationalregistrationnumber",
	"Registrationauthorityidentification",
	"LEI(LegalEntityIdentifier)",
	"Alienregistrationnumber",
	"Passportnumber",
	"Taxexemptidentificationnumber",
	"Corporateidentification",
	"Driverlicensenumber",
	"Foreigninvestmentidentitynumber",
	"Socialsecuritynumber",
	"Identitycardnumber",
	"Concat",
	"Nationalregistrationidentificationnumber",
}

// validPartyidentificationtypevaluesEnumValue provides a map of Partyidentificationtypevaluess for fast verification of use input
var validPartyidentificationtypevaluesEnumValues = map[Partyidentificationtypevalues]struct{}{
	"Taxidentificationnumber": {},
	"Nationalregistrationnumber": {},
	"Registrationauthorityidentification": {},
	"LEI(LegalEntityIdentifier)": {},
	"Alienregistrationnumber": {},
	"Passportnumber": {},
	"Taxexemptidentificationnumber": {},
	"Corporateidentification": {},
	"Driverlicensenumber": {},
	"Foreigninvestmentidentitynumber": {},
	"Socialsecuritynumber": {},
	"Identitycardnumber": {},
	"Concat": {},
	"Nationalregistrationidentificationnumber": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Partyidentificationtypevalues) IsValid() bool {
	_, ok := validPartyidentificationtypevaluesEnumValues[v]
	return ok
}

// NewPartyidentificationtypevaluesFromValue returns a pointer to a valid Partyidentificationtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartyidentificationtypevaluesFromValue(v string) (Partyidentificationtypevalues, error) {
	ev := Partyidentificationtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Partyidentificationtypevalues: valid values are %v", v, AllowedPartyidentificationtypevaluesEnumValues)
}



// AssertPartyidentificationtypevaluesRequired checks if the required fields are not zero-ed
func AssertPartyidentificationtypevaluesRequired(obj Partyidentificationtypevalues) error {
	return nil
}

// AssertPartyidentificationtypevaluesConstraints checks if the values respects the defined constraints
func AssertPartyidentificationtypevaluesConstraints(obj Partyidentificationtypevalues) error {
	return nil
}
