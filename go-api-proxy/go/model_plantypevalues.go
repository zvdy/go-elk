// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Plantypevalues : >  * `AdministrativePlan` -   * `ManagementPlan` -   * `StratgyPlan` -   * `FinancialPlan` -   
type Plantypevalues string

// List of Plantypevalues
const (
	ADMINISTRATIVE_PLAN Plantypevalues = "AdministrativePlan"
	MANAGEMENT_PLAN Plantypevalues = "ManagementPlan"
	STRATGY_PLAN Plantypevalues = "StratgyPlan"
	FINANCIAL_PLAN Plantypevalues = "FinancialPlan"
)

// AllowedPlantypevaluesEnumValues is all the allowed values of Plantypevalues enum
var AllowedPlantypevaluesEnumValues = []Plantypevalues{
	"AdministrativePlan",
	"ManagementPlan",
	"StratgyPlan",
	"FinancialPlan",
}

// validPlantypevaluesEnumValue provides a map of Plantypevaluess for fast verification of use input
var validPlantypevaluesEnumValues = map[Plantypevalues]struct{}{
	"AdministrativePlan": {},
	"ManagementPlan": {},
	"StratgyPlan": {},
	"FinancialPlan": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Plantypevalues) IsValid() bool {
	_, ok := validPlantypevaluesEnumValues[v]
	return ok
}

// NewPlantypevaluesFromValue returns a pointer to a valid Plantypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlantypevaluesFromValue(v string) (Plantypevalues, error) {
	ev := Plantypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Plantypevalues: valid values are %v", v, AllowedPlantypevaluesEnumValues)
}



// AssertPlantypevaluesRequired checks if the required fields are not zero-ed
func AssertPlantypevaluesRequired(obj Plantypevalues) error {
	return nil
}

// AssertPlantypevaluesConstraints checks if the values respects the defined constraints
func AssertPlantypevaluesConstraints(obj Plantypevalues) error {
	return nil
}
