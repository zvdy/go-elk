// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Location - Reference to the location the payment transaction is initiated from
type Location struct {

	LocationDescription Text `json:"LocationDescription,omitempty"`

	LocationDateTime Datetime `json:"LocationDateTime,omitempty"`

	LocationStatus Status `json:"LocationStatus,omitempty"`

	LocationType Geographicalareatypevalues `json:"LocationType,omitempty"`

	LocationZoningType Text `json:"LocationZoningType,omitempty"`

	LocationNeighborhoodType Text `json:"LocationNeighborhoodType,omitempty"`

	LocationConstructionType Text `json:"LocationConstructionType,omitempty"`

	LocationOccupancyType Text `json:"LocationOccupancyType,omitempty"`

	LocationValue Value `json:"LocationValue,omitempty"`

	LocationCapacity Text `json:"LocationCapacity,omitempty"`

	LocationIdentification Identifier `json:"LocationIdentification,omitempty"`

	LocationAddress Address `json:"LocationAddress,omitempty"`

	LocationName Name `json:"LocationName,omitempty"`

	LocationTimeZone Text `json:"LocationTimeZone,omitempty"`
}

// AssertLocationRequired checks if the required fields are not zero-ed
func AssertLocationRequired(obj Location) error {
	if err := AssertTextRequired(obj.LocationDescription); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.LocationDateTime); err != nil {
		return err
	}
	if err := AssertStatusRequired(obj.LocationStatus); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationZoningType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationNeighborhoodType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationConstructionType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationOccupancyType); err != nil {
		return err
	}
	if err := AssertValueRequired(obj.LocationValue); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationCapacity); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.LocationIdentification); err != nil {
		return err
	}
	if err := AssertAddressRequired(obj.LocationAddress); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.LocationName); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.LocationTimeZone); err != nil {
		return err
	}
	return nil
}

// AssertLocationConstraints checks if the values respects the defined constraints
func AssertLocationConstraints(obj Location) error {
	if err := AssertTextConstraints(obj.LocationDescription); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.LocationDateTime); err != nil {
		return err
	}
	if err := AssertStatusConstraints(obj.LocationStatus); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationZoningType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationNeighborhoodType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationConstructionType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationOccupancyType); err != nil {
		return err
	}
	if err := AssertValueConstraints(obj.LocationValue); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationCapacity); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.LocationIdentification); err != nil {
		return err
	}
	if err := AssertAddressConstraints(obj.LocationAddress); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.LocationName); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.LocationTimeZone); err != nil {
		return err
	}
	return nil
}
