// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Geographicalareatypevalues : >  * `Continent` -   * `Country` -   * `State` -   * `District` -   * `Province` -   * `Town` -   * `City` -   * `Region` -   
type Geographicalareatypevalues string

// List of Geographicalareatypevalues
const (
	CONTINENT Geographicalareatypevalues = "Continent"
	COUNTRY Geographicalareatypevalues = "Country"
	STATE Geographicalareatypevalues = "State"
	DISTRICT Geographicalareatypevalues = "District"
	PROVINCE Geographicalareatypevalues = "Province"
	TOWN Geographicalareatypevalues = "Town"
	CITY Geographicalareatypevalues = "City"
	REGION Geographicalareatypevalues = "Region"
)

// AllowedGeographicalareatypevaluesEnumValues is all the allowed values of Geographicalareatypevalues enum
var AllowedGeographicalareatypevaluesEnumValues = []Geographicalareatypevalues{
	"Continent",
	"Country",
	"State",
	"District",
	"Province",
	"Town",
	"City",
	"Region",
}

// validGeographicalareatypevaluesEnumValue provides a map of Geographicalareatypevaluess for fast verification of use input
var validGeographicalareatypevaluesEnumValues = map[Geographicalareatypevalues]struct{}{
	"Continent": {},
	"Country": {},
	"State": {},
	"District": {},
	"Province": {},
	"Town": {},
	"City": {},
	"Region": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Geographicalareatypevalues) IsValid() bool {
	_, ok := validGeographicalareatypevaluesEnumValues[v]
	return ok
}

// NewGeographicalareatypevaluesFromValue returns a pointer to a valid Geographicalareatypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeographicalareatypevaluesFromValue(v string) (Geographicalareatypevalues, error) {
	ev := Geographicalareatypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Geographicalareatypevalues: valid values are %v", v, AllowedGeographicalareatypevaluesEnumValues)
}



// AssertGeographicalareatypevaluesRequired checks if the required fields are not zero-ed
func AssertGeographicalareatypevaluesRequired(obj Geographicalareatypevalues) error {
	return nil
}

// AssertGeographicalareatypevaluesConstraints checks if the values respects the defined constraints
func AssertGeographicalareatypevaluesConstraints(obj Geographicalareatypevalues) error {
	return nil
}
