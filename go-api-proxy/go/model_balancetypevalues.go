// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Balancetypevalues : >  * `Openingbalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)  * `Closingbalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)  * `Currentbalance` - Balance of the account at a precise moment in time. (ISO20022)  * `Availablebalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)  * `Ledgerbalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)  * `Reservebalance` -   * `Freebalance` -   * `Principalbalance` -   
type Balancetypevalues string

// List of Balancetypevalues
const (
	OPENINGBALANCE Balancetypevalues = "Openingbalance"
	CLOSINGBALANCE Balancetypevalues = "Closingbalance"
	CURRENTBALANCE Balancetypevalues = "Currentbalance"
	AVAILABLEBALANCE Balancetypevalues = "Availablebalance"
	LEDGERBALANCE Balancetypevalues = "Ledgerbalance"
	RESERVEBALANCE Balancetypevalues = "Reservebalance"
	FREEBALANCE Balancetypevalues = "Freebalance"
	PRINCIPALBALANCE Balancetypevalues = "Principalbalance"
)

// AllowedBalancetypevaluesEnumValues is all the allowed values of Balancetypevalues enum
var AllowedBalancetypevaluesEnumValues = []Balancetypevalues{
	"Openingbalance",
	"Closingbalance",
	"Currentbalance",
	"Availablebalance",
	"Ledgerbalance",
	"Reservebalance",
	"Freebalance",
	"Principalbalance",
}

// validBalancetypevaluesEnumValue provides a map of Balancetypevaluess for fast verification of use input
var validBalancetypevaluesEnumValues = map[Balancetypevalues]struct{}{
	"Openingbalance": {},
	"Closingbalance": {},
	"Currentbalance": {},
	"Availablebalance": {},
	"Ledgerbalance": {},
	"Reservebalance": {},
	"Freebalance": {},
	"Principalbalance": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Balancetypevalues) IsValid() bool {
	_, ok := validBalancetypevaluesEnumValues[v]
	return ok
}

// NewBalancetypevaluesFromValue returns a pointer to a valid Balancetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBalancetypevaluesFromValue(v string) (Balancetypevalues, error) {
	ev := Balancetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Balancetypevalues: valid values are %v", v, AllowedBalancetypevaluesEnumValues)
}



// AssertBalancetypevaluesRequired checks if the required fields are not zero-ed
func AssertBalancetypevaluesRequired(obj Balancetypevalues) error {
	return nil
}

// AssertBalancetypevaluesConstraints checks if the values respects the defined constraints
func AssertBalancetypevaluesConstraints(obj Balancetypevalues) error {
	return nil
}
