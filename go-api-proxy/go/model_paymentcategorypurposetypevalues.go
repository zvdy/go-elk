// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentcategorypurposetypevalues : >  * `Bonuspayment` - Transaction is the payment of a bonus.  * `Cashmanagementtransfer` - Transaction is a general cash management instruction.  * `Cardbulkclearing` - A Service that is settling money for a bulk of card transactions, while referring to a specific transaction file or other information like terminal ID, card acceptor ID or other transaction details.  * `Creditcardpayment` - Transaction is related to a payment of credit card.  * `Tradesettlementpayment` - Transaction is related to settlement of a trade, eg a foreign exchange deal or a securities transaction.  * `Debitcardpayment` - Transaction is related to a payment of debit card.  * `Dividend` - Transaction is the payment of dividends.  * `Deliveragainstpayment` - Code used to pre-advise the account servicer of a forthcoming deliver against payment instruction.  * `Epayment` - Transaction is related to ePayment.  * `Feecollection` - A Service that is settling card transaction related fees between two parties.  * `Governmentpayment` - Transaction is a payment to or from a government department.  * `Hedging` - Transaction is related to the payment of a hedging operation.  * `Irrevocablecreditcardpayment` - Transaction is reimbursement of credit card payment.  * `Irrevocabledebitcardpayment` - Transaction is reimbursement of debit card payment.  * `Intracompanypayment` - Transaction is an intra-company payment, ie, a payment between two companies belonging to the same group.  * `Interest` - Transaction is the payment of interest.  * `Loan` - Transaction is related to the transfer of a loan to a borrower.  * `Commercial` - Mobile P2B Payment  * `Consumer` - Mobile P2P Payment  * `Otherpayment` - Other payment purpose.  * `Pensionpayment` - Transaction is the payment of pension.  * `Represented` - Collection used to re-present previously reversed or returned direct debit transactions.  * `Reimbursementreceivedcredittransfer` - Transaction is related to a reimbursement for commercial reasons of a correctly received credit transfer.  * `Receiveagainstpayment` - Code used to pre-advise the account servicer of a forthcoming receive against payment instruction.  * `Salarypayment` - Transaction is the payment of salaries.  * `Securities` - Transaction is the payment of securities.  * `Socialsecuritybenefit` - Transaction is a social security benefit, ie payment made by a government to support individuals.  * `Supplierpayment` - Transaction is related to a payment to a supplier.  * `Taxpayment` - Transaction is the payment of taxes.  * `Trade` - Transaction is related to the payment of a trade finance transaction.  * `Treasurypayment` - Transaction is related to treasury operations.  E.g. financial contract settlement.  * `Valueaddedtaxpayment` - Transaction is the payment of value added tax.  * `Withholding` - Transaction is the payment of withholding tax.  
type Paymentcategorypurposetypevalues string

// List of Paymentcategorypurposetypevalues
const (
	BONUSPAYMENT Paymentcategorypurposetypevalues = "Bonuspayment"
	CASHMANAGEMENTTRANSFER Paymentcategorypurposetypevalues = "Cashmanagementtransfer"
	CARDBULKCLEARING Paymentcategorypurposetypevalues = "Cardbulkclearing"
	CREDITCARDPAYMENT Paymentcategorypurposetypevalues = "Creditcardpayment"
	TRADESETTLEMENTPAYMENT Paymentcategorypurposetypevalues = "Tradesettlementpayment"
	DEBITCARDPAYMENT Paymentcategorypurposetypevalues = "Debitcardpayment"
	DIVIDEND Paymentcategorypurposetypevalues = "Dividend"
	DELIVERAGAINSTPAYMENT Paymentcategorypurposetypevalues = "Deliveragainstpayment"
	EPAYMENT Paymentcategorypurposetypevalues = "Epayment"
	FEECOLLECTION Paymentcategorypurposetypevalues = "Feecollection"
	GOVERNMENTPAYMENT Paymentcategorypurposetypevalues = "Governmentpayment"
	HEDGING Paymentcategorypurposetypevalues = "Hedging"
	IRREVOCABLECREDITCARDPAYMENT Paymentcategorypurposetypevalues = "Irrevocablecreditcardpayment"
	IRREVOCABLEDEBITCARDPAYMENT Paymentcategorypurposetypevalues = "Irrevocabledebitcardpayment"
	INTRACOMPANYPAYMENT Paymentcategorypurposetypevalues = "Intracompanypayment"
	INTEREST Paymentcategorypurposetypevalues = "Interest"
	LOAN Paymentcategorypurposetypevalues = "Loan"
	COMMERCIAL Paymentcategorypurposetypevalues = "Commercial"
	CONSUMER Paymentcategorypurposetypevalues = "Consumer"
	OTHERPAYMENT Paymentcategorypurposetypevalues = "Otherpayment"
	PENSIONPAYMENT Paymentcategorypurposetypevalues = "Pensionpayment"
	REPRESENTED Paymentcategorypurposetypevalues = "Represented"
	REIMBURSEMENTRECEIVEDCREDITTRANSFER Paymentcategorypurposetypevalues = "Reimbursementreceivedcredittransfer"
	RECEIVEAGAINSTPAYMENT Paymentcategorypurposetypevalues = "Receiveagainstpayment"
	SALARYPAYMENT Paymentcategorypurposetypevalues = "Salarypayment"
	SECURITIES Paymentcategorypurposetypevalues = "Securities"
	SOCIALSECURITYBENEFIT Paymentcategorypurposetypevalues = "Socialsecuritybenefit"
	SUPPLIERPAYMENT Paymentcategorypurposetypevalues = "Supplierpayment"
	TAXPAYMENT Paymentcategorypurposetypevalues = "Taxpayment"
	TRADE Paymentcategorypurposetypevalues = "Trade"
	TREASURYPAYMENT Paymentcategorypurposetypevalues = "Treasurypayment"
	VALUEADDEDTAXPAYMENT Paymentcategorypurposetypevalues = "Valueaddedtaxpayment"
	WITHHOLDING Paymentcategorypurposetypevalues = "Withholding"
)

// AllowedPaymentcategorypurposetypevaluesEnumValues is all the allowed values of Paymentcategorypurposetypevalues enum
var AllowedPaymentcategorypurposetypevaluesEnumValues = []Paymentcategorypurposetypevalues{
	"Bonuspayment",
	"Cashmanagementtransfer",
	"Cardbulkclearing",
	"Creditcardpayment",
	"Tradesettlementpayment",
	"Debitcardpayment",
	"Dividend",
	"Deliveragainstpayment",
	"Epayment",
	"Feecollection",
	"Governmentpayment",
	"Hedging",
	"Irrevocablecreditcardpayment",
	"Irrevocabledebitcardpayment",
	"Intracompanypayment",
	"Interest",
	"Loan",
	"Commercial",
	"Consumer",
	"Otherpayment",
	"Pensionpayment",
	"Represented",
	"Reimbursementreceivedcredittransfer",
	"Receiveagainstpayment",
	"Salarypayment",
	"Securities",
	"Socialsecuritybenefit",
	"Supplierpayment",
	"Taxpayment",
	"Trade",
	"Treasurypayment",
	"Valueaddedtaxpayment",
	"Withholding",
}

// validPaymentcategorypurposetypevaluesEnumValue provides a map of Paymentcategorypurposetypevaluess for fast verification of use input
var validPaymentcategorypurposetypevaluesEnumValues = map[Paymentcategorypurposetypevalues]struct{}{
	"Bonuspayment": {},
	"Cashmanagementtransfer": {},
	"Cardbulkclearing": {},
	"Creditcardpayment": {},
	"Tradesettlementpayment": {},
	"Debitcardpayment": {},
	"Dividend": {},
	"Deliveragainstpayment": {},
	"Epayment": {},
	"Feecollection": {},
	"Governmentpayment": {},
	"Hedging": {},
	"Irrevocablecreditcardpayment": {},
	"Irrevocabledebitcardpayment": {},
	"Intracompanypayment": {},
	"Interest": {},
	"Loan": {},
	"Commercial": {},
	"Consumer": {},
	"Otherpayment": {},
	"Pensionpayment": {},
	"Represented": {},
	"Reimbursementreceivedcredittransfer": {},
	"Receiveagainstpayment": {},
	"Salarypayment": {},
	"Securities": {},
	"Socialsecuritybenefit": {},
	"Supplierpayment": {},
	"Taxpayment": {},
	"Trade": {},
	"Treasurypayment": {},
	"Valueaddedtaxpayment": {},
	"Withholding": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentcategorypurposetypevalues) IsValid() bool {
	_, ok := validPaymentcategorypurposetypevaluesEnumValues[v]
	return ok
}

// NewPaymentcategorypurposetypevaluesFromValue returns a pointer to a valid Paymentcategorypurposetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentcategorypurposetypevaluesFromValue(v string) (Paymentcategorypurposetypevalues, error) {
	ev := Paymentcategorypurposetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentcategorypurposetypevalues: valid values are %v", v, AllowedPaymentcategorypurposetypevaluesEnumValues)
}



// AssertPaymentcategorypurposetypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentcategorypurposetypevaluesRequired(obj Paymentcategorypurposetypevalues) error {
	return nil
}

// AssertPaymentcategorypurposetypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentcategorypurposetypevaluesConstraints(obj Paymentcategorypurposetypevalues) error {
	return nil
}
