// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Ruleset - Guidelines to be used in the lien modalities
type Ruleset struct {

	RuleSetDefinition Text `json:"RuleSetDefinition,omitempty"`

	RuleSetInterpretation Text `json:"RuleSetInterpretation,omitempty"`

	RuleSetType Rulesettype `json:"RuleSetType,omitempty"`

	RuleSetName Name `json:"RuleSetName,omitempty"`

	RuleSetIdentification Identifier `json:"RuleSetIdentification,omitempty"`

	RuleSetLifecycleStatus Status `json:"RuleSetLifecycleStatus,omitempty"`
}

// AssertRulesetRequired checks if the required fields are not zero-ed
func AssertRulesetRequired(obj Ruleset) error {
	if err := AssertTextRequired(obj.RuleSetDefinition); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.RuleSetInterpretation); err != nil {
		return err
	}
	if err := AssertRulesettypeRequired(obj.RuleSetType); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.RuleSetName); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.RuleSetIdentification); err != nil {
		return err
	}
	if err := AssertStatusRequired(obj.RuleSetLifecycleStatus); err != nil {
		return err
	}
	return nil
}

// AssertRulesetConstraints checks if the values respects the defined constraints
func AssertRulesetConstraints(obj Ruleset) error {
	if err := AssertTextConstraints(obj.RuleSetDefinition); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.RuleSetInterpretation); err != nil {
		return err
	}
	if err := AssertRulesettypeConstraints(obj.RuleSetType); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.RuleSetName); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.RuleSetIdentification); err != nil {
		return err
	}
	if err := AssertStatusConstraints(obj.RuleSetLifecycleStatus); err != nil {
		return err
	}
	return nil
}
