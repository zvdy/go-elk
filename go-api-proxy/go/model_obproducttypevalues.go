// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Obproducttypevalues : Descriptive code for the product category. If ProductType - \"Other\" is chosen, the object OtherProductType must be populated with name, and description. ||  |
type Obproducttypevalues string

// List of Obproducttypevalues
const (
	BUSINESSCURRENTACCOUNT Obproducttypevalues = "Businesscurrentaccount"
	COMMERCIALCREDITCARD Obproducttypevalues = "Commercialcreditcard"
	OTHER Obproducttypevalues = "Other"
	PERSONALCURRENTACCOUNT Obproducttypevalues = "Personalcurrentaccount"
	SMELOAN Obproducttypevalues = "Smeloan"
)

// AllowedObproducttypevaluesEnumValues is all the allowed values of Obproducttypevalues enum
var AllowedObproducttypevaluesEnumValues = []Obproducttypevalues{
	"Businesscurrentaccount",
	"Commercialcreditcard",
	"Other",
	"Personalcurrentaccount",
	"Smeloan",
}

// validObproducttypevaluesEnumValue provides a map of Obproducttypevaluess for fast verification of use input
var validObproducttypevaluesEnumValues = map[Obproducttypevalues]struct{}{
	"Businesscurrentaccount": {},
	"Commercialcreditcard": {},
	"Other": {},
	"Personalcurrentaccount": {},
	"Smeloan": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Obproducttypevalues) IsValid() bool {
	_, ok := validObproducttypevaluesEnumValues[v]
	return ok
}

// NewObproducttypevaluesFromValue returns a pointer to a valid Obproducttypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObproducttypevaluesFromValue(v string) (Obproducttypevalues, error) {
	ev := Obproducttypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Obproducttypevalues: valid values are %v", v, AllowedObproducttypevaluesEnumValues)
}



// AssertObproducttypevaluesRequired checks if the required fields are not zero-ed
func AssertObproducttypevaluesRequired(obj Obproducttypevalues) error {
	return nil
}

// AssertObproducttypevaluesConstraints checks if the values respects the defined constraints
func AssertObproducttypevaluesConstraints(obj Obproducttypevalues) error {
	return nil
}
