// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Chargebearertypevalues : >  * `Bornebydebtor` - All transaction charges are to be borne by the debtor.  * `Bornebycreditor` - All transaction charges are to be borne by the creditor.  * `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.  * `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.  
type Chargebearertypevalues string

// List of Chargebearertypevalues
const (
	BORNEBYDEBTOR Chargebearertypevalues = "Bornebydebtor"
	BORNEBYCREDITOR Chargebearertypevalues = "Bornebycreditor"
	SHARED Chargebearertypevalues = "Shared"
	FOLLOWINGSERVICELEVEL Chargebearertypevalues = "Followingservicelevel"
)

// AllowedChargebearertypevaluesEnumValues is all the allowed values of Chargebearertypevalues enum
var AllowedChargebearertypevaluesEnumValues = []Chargebearertypevalues{
	"Bornebydebtor",
	"Bornebycreditor",
	"Shared",
	"Followingservicelevel",
}

// validChargebearertypevaluesEnumValue provides a map of Chargebearertypevaluess for fast verification of use input
var validChargebearertypevaluesEnumValues = map[Chargebearertypevalues]struct{}{
	"Bornebydebtor": {},
	"Bornebycreditor": {},
	"Shared": {},
	"Followingservicelevel": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Chargebearertypevalues) IsValid() bool {
	_, ok := validChargebearertypevaluesEnumValues[v]
	return ok
}

// NewChargebearertypevaluesFromValue returns a pointer to a valid Chargebearertypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChargebearertypevaluesFromValue(v string) (Chargebearertypevalues, error) {
	ev := Chargebearertypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Chargebearertypevalues: valid values are %v", v, AllowedChargebearertypevaluesEnumValues)
}



// AssertChargebearertypevaluesRequired checks if the required fields are not zero-ed
func AssertChargebearertypevaluesRequired(obj Chargebearertypevalues) error {
	return nil
}

// AssertChargebearertypevaluesConstraints checks if the values respects the defined constraints
func AssertChargebearertypevaluesConstraints(obj Chargebearertypevalues) error {
	return nil
}
