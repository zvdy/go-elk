// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQCorporateActionAPIController binds http requests to an api service and writes the service results to the http response
type BQCorporateActionAPIController struct {
	service BQCorporateActionAPIServicer
	errorHandler ErrorHandler
}

// BQCorporateActionAPIOption for how the controller is set up.
type BQCorporateActionAPIOption func(*BQCorporateActionAPIController)

// WithBQCorporateActionAPIErrorHandler inject ErrorHandler into controller
func WithBQCorporateActionAPIErrorHandler(h ErrorHandler) BQCorporateActionAPIOption {
	return func(c *BQCorporateActionAPIController) {
		c.errorHandler = h
	}
}

// NewBQCorporateActionAPIController creates a default api controller
func NewBQCorporateActionAPIController(s BQCorporateActionAPIServicer, opts ...BQCorporateActionAPIOption) *BQCorporateActionAPIController {
	controller := &BQCorporateActionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQCorporateActionAPIController
func (c *BQCorporateActionAPIController) Routes() Routes {
	return Routes{
		"InitiateCorporateAction": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/CorporateAction/Initiate",
			c.InitiateCorporateAction,
		},
		"RetrieveCorporateAction": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/CorporateAction/{corporateactionid}/Retrieve",
			c.RetrieveCorporateAction,
		},
		"UpdateCorporateAction": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/CorporateAction/{corporateactionid}/Update",
			c.UpdateCorporateAction,
		},
	}
}

// InitiateCorporateAction - InBQ Instantiate a new Corporate Action
func (c *BQCorporateActionAPIController) InitiateCorporateAction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	corporateActionParam := CorporateAction{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&corporateActionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCorporateActionRequired(corporateActionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCorporateActionConstraints(corporateActionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateCorporateAction(r.Context(), leasingidParam, corporateActionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveCorporateAction - ReBQ Retrieve details about any aspect of Corporate Action
func (c *BQCorporateActionAPIController) RetrieveCorporateAction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	corporateactionidParam := params["corporateactionid"]
	if corporateactionidParam == "" {
		c.errorHandler(w, r, &RequiredError{"corporateactionid"}, nil)
		return
	}
	result, err := c.service.RetrieveCorporateAction(r.Context(), leasingidParam, corporateactionidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCorporateAction - UpBQ Update details relating to Corporate Action
func (c *BQCorporateActionAPIController) UpdateCorporateAction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	corporateactionidParam := params["corporateactionid"]
	if corporateactionidParam == "" {
		c.errorHandler(w, r, &RequiredError{"corporateactionid"}, nil)
		return
	}
	corporateActionParam := CorporateAction{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&corporateActionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCorporateActionRequired(corporateActionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCorporateActionConstraints(corporateActionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCorporateAction(r.Context(), leasingidParam, corporateactionidParam, corporateActionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
