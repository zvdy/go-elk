// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Interesttypevalues : >  * `Fixed` - Indicates that the type of interest is fixed.  * `Floatingratenote` - Indicates that the type of interest is a floating rate note.  * `Dualbasis` - Indicates that the type of interest is a dual basis.  * `Index` - Indicates that the type of interest is index.  * `Discounted` - Indicates that the type of interest is discounted.  * `Zerocoupon` - Indicates that the type of interest is a zero coupon.  * `Exinterest` - Indicates deal price excluding accrued interest.  * `Cuminterest` - Indicates deal price including accrued interest.  
type Interesttypevalues string

// List of Interesttypevalues
const (
	FIXED Interesttypevalues = "Fixed"
	FLOATINGRATENOTE Interesttypevalues = "Floatingratenote"
	DUALBASIS Interesttypevalues = "Dualbasis"
	INDEX Interesttypevalues = "Index"
	DISCOUNTED Interesttypevalues = "Discounted"
	ZEROCOUPON Interesttypevalues = "Zerocoupon"
	EXINTEREST Interesttypevalues = "Exinterest"
	CUMINTEREST Interesttypevalues = "Cuminterest"
)

// AllowedInteresttypevaluesEnumValues is all the allowed values of Interesttypevalues enum
var AllowedInteresttypevaluesEnumValues = []Interesttypevalues{
	"Fixed",
	"Floatingratenote",
	"Dualbasis",
	"Index",
	"Discounted",
	"Zerocoupon",
	"Exinterest",
	"Cuminterest",
}

// validInteresttypevaluesEnumValue provides a map of Interesttypevaluess for fast verification of use input
var validInteresttypevaluesEnumValues = map[Interesttypevalues]struct{}{
	"Fixed": {},
	"Floatingratenote": {},
	"Dualbasis": {},
	"Index": {},
	"Discounted": {},
	"Zerocoupon": {},
	"Exinterest": {},
	"Cuminterest": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Interesttypevalues) IsValid() bool {
	_, ok := validInteresttypevaluesEnumValues[v]
	return ok
}

// NewInteresttypevaluesFromValue returns a pointer to a valid Interesttypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInteresttypevaluesFromValue(v string) (Interesttypevalues, error) {
	ev := Interesttypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Interesttypevalues: valid values are %v", v, AllowedInteresttypevaluesEnumValues)
}



// AssertInteresttypevaluesRequired checks if the required fields are not zero-ed
func AssertInteresttypevaluesRequired(obj Interesttypevalues) error {
	return nil
}

// AssertInteresttypevaluesConstraints checks if the values respects the defined constraints
func AssertInteresttypevaluesConstraints(obj Interesttypevalues) error {
	return nil
}
