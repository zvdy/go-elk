// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Directdebittypevalues : >  * `FixedAmount` - Direct debit amount is fixed.  * `VariableAmount` - Direct debit amount is variable.  * `UsagebasedAmont` - Direct debit amount is based on usage.  * `Paper` - This is a physical form that the customer fills out, signs, and returns to the organization  * `Emandate` - It can be completed and signed electronically, often through online forms or secure digital platforms.  
type Directdebittypevalues string

// List of Directdebittypevalues
const (
	FIXED_AMOUNT Directdebittypevalues = "FixedAmount"
	VARIABLE_AMOUNT Directdebittypevalues = "VariableAmount"
	USAGEBASED_AMONT Directdebittypevalues = "UsagebasedAmont"
	PAPER Directdebittypevalues = "Paper"
	EMANDATE Directdebittypevalues = "Emandate"
)

// AllowedDirectdebittypevaluesEnumValues is all the allowed values of Directdebittypevalues enum
var AllowedDirectdebittypevaluesEnumValues = []Directdebittypevalues{
	"FixedAmount",
	"VariableAmount",
	"UsagebasedAmont",
	"Paper",
	"Emandate",
}

// validDirectdebittypevaluesEnumValue provides a map of Directdebittypevaluess for fast verification of use input
var validDirectdebittypevaluesEnumValues = map[Directdebittypevalues]struct{}{
	"FixedAmount": {},
	"VariableAmount": {},
	"UsagebasedAmont": {},
	"Paper": {},
	"Emandate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Directdebittypevalues) IsValid() bool {
	_, ok := validDirectdebittypevaluesEnumValues[v]
	return ok
}

// NewDirectdebittypevaluesFromValue returns a pointer to a valid Directdebittypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectdebittypevaluesFromValue(v string) (Directdebittypevalues, error) {
	ev := Directdebittypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Directdebittypevalues: valid values are %v", v, AllowedDirectdebittypevaluesEnumValues)
}



// AssertDirectdebittypevaluesRequired checks if the required fields are not zero-ed
func AssertDirectdebittypevaluesRequired(obj Directdebittypevalues) error {
	return nil
}

// AssertDirectdebittypevaluesConstraints checks if the values respects the defined constraints
func AssertDirectdebittypevaluesConstraints(obj Directdebittypevalues) error {
	return nil
}
