// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// FinancialInstrument - The product features/services available with a financical facility
type FinancialInstrument struct {

	FinancialInstrumentPreconditions Condition `json:"FinancialInstrumentPreconditions,omitempty"`

	FinancialInstrumentFeatureSchedule Schedule `json:"FinancialInstrumentFeatureSchedule,omitempty"`

	FinancialInstrument Businessservice `json:"FinancialInstrument,omitempty"`

	FinancialInstrumentPostconditions Condition `json:"FinancialInstrumentPostconditions,omitempty"`

	FinancialInstrumentServiceType Text `json:"FinancialInstrumentServiceType,omitempty"`

	FinancialInstrumentServiceDescription Text `json:"FinancialInstrumentServiceDescription,omitempty"`

	FinancialInstrumentServiceInputsandOuputs Text `json:"FinancialInstrumentServiceInputsandOuputs,omitempty"`

	FinancialInstrumentServiceWorkProduct Workproduct `json:"FinancialInstrumentServiceWorkProduct,omitempty"`

	FinancialInstrumentServiceName Name `json:"FinancialInstrumentServiceName,omitempty"`
}

// AssertFinancialInstrumentRequired checks if the required fields are not zero-ed
func AssertFinancialInstrumentRequired(obj FinancialInstrument) error {
	if err := AssertConditionRequired(obj.FinancialInstrumentPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.FinancialInstrumentFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceRequired(obj.FinancialInstrument); err != nil {
		return err
	}
	if err := AssertConditionRequired(obj.FinancialInstrumentPostconditions); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.FinancialInstrumentServiceType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.FinancialInstrumentServiceDescription); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.FinancialInstrumentServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductRequired(obj.FinancialInstrumentServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.FinancialInstrumentServiceName); err != nil {
		return err
	}
	return nil
}

// AssertFinancialInstrumentConstraints checks if the values respects the defined constraints
func AssertFinancialInstrumentConstraints(obj FinancialInstrument) error {
	if err := AssertConditionConstraints(obj.FinancialInstrumentPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.FinancialInstrumentFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceConstraints(obj.FinancialInstrument); err != nil {
		return err
	}
	if err := AssertConditionConstraints(obj.FinancialInstrumentPostconditions); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.FinancialInstrumentServiceType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.FinancialInstrumentServiceDescription); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.FinancialInstrumentServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductConstraints(obj.FinancialInstrumentServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.FinancialInstrumentServiceName); err != nil {
		return err
	}
	return nil
}
