// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CRLeasingFacilityAPIController binds http requests to an api service and writes the service results to the http response
type CRLeasingFacilityAPIController struct {
	service CRLeasingFacilityAPIServicer
	errorHandler ErrorHandler
}

// CRLeasingFacilityAPIOption for how the controller is set up.
type CRLeasingFacilityAPIOption func(*CRLeasingFacilityAPIController)

// WithCRLeasingFacilityAPIErrorHandler inject ErrorHandler into controller
func WithCRLeasingFacilityAPIErrorHandler(h ErrorHandler) CRLeasingFacilityAPIOption {
	return func(c *CRLeasingFacilityAPIController) {
		c.errorHandler = h
	}
}

// NewCRLeasingFacilityAPIController creates a default api controller
func NewCRLeasingFacilityAPIController(s CRLeasingFacilityAPIServicer, opts ...CRLeasingFacilityAPIOption) *CRLeasingFacilityAPIController {
	controller := &CRLeasingFacilityAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CRLeasingFacilityAPIController
func (c *CRLeasingFacilityAPIController) Routes() Routes {
	return Routes{
		"Control": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Control",
			c.Control,
		},
		"Exchange": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Exchange",
			c.Exchange,
		},
		"Execute": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Execute",
			c.Execute,
		},
		"Initiate": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/Initiate",
			c.Initiate,
		},
		"Retrieve": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Retrieve",
			c.Retrieve,
		},
		"Request": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Request",
			c.Request,
		},
		"Update": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Update",
			c.Update,
		},
	}
}

// Control - CoCR Control the processing of Leasing Facility
func (c *CRLeasingFacilityAPIController) Control(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Control(r.Context(), leasingidParam, leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Exchange - EcCR Accept, verify, etc. aspects of Leasing Facility processing
func (c *CRLeasingFacilityAPIController) Exchange(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Exchange(r.Context(), leasingidParam, leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Execute - ExCR Execute an available automated action for Leasing Facility
func (c *CRLeasingFacilityAPIController) Execute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Execute(r.Context(), leasingidParam, leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Initiate - InCR Instantiate a new Leasing Facility
func (c *CRLeasingFacilityAPIController) Initiate(w http.ResponseWriter, r *http.Request) {
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Initiate(r.Context(), leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Retrieve - ReCR Retrieve details about any aspect of Leasing Facility
func (c *CRLeasingFacilityAPIController) Retrieve(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	result, err := c.service.Retrieve(r.Context(), leasingidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Request - RqCR Request manual intervention or a decision with respect to Leasing Facility
func (c *CRLeasingFacilityAPIController) Request(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Request(r.Context(), leasingidParam, leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Update - UpCR Update details relating to Leasing Facility
func (c *CRLeasingFacilityAPIController) Update(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	leasingFacilityParam := LeasingFacility{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leasingFacilityParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeasingFacilityRequired(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeasingFacilityConstraints(leasingFacilityParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Update(r.Context(), leasingidParam, leasingFacilityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
