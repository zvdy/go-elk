// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQWithdrawalsAPIController binds http requests to an api service and writes the service results to the http response
type BQWithdrawalsAPIController struct {
	service BQWithdrawalsAPIServicer
	errorHandler ErrorHandler
}

// BQWithdrawalsAPIOption for how the controller is set up.
type BQWithdrawalsAPIOption func(*BQWithdrawalsAPIController)

// WithBQWithdrawalsAPIErrorHandler inject ErrorHandler into controller
func WithBQWithdrawalsAPIErrorHandler(h ErrorHandler) BQWithdrawalsAPIOption {
	return func(c *BQWithdrawalsAPIController) {
		c.errorHandler = h
	}
}

// NewBQWithdrawalsAPIController creates a default api controller
func NewBQWithdrawalsAPIController(s BQWithdrawalsAPIServicer, opts ...BQWithdrawalsAPIOption) *BQWithdrawalsAPIController {
	controller := &BQWithdrawalsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQWithdrawalsAPIController
func (c *BQWithdrawalsAPIController) Routes() Routes {
	return Routes{
		"InitiateWithdrawals": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Withdrawals/Initiate",
			c.InitiateWithdrawals,
		},
		"RetrieveWithdrawals": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Withdrawals/{withdrawalsid}/Retrieve",
			c.RetrieveWithdrawals,
		},
		"UpdateWithdrawals": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Withdrawals/{withdrawalsid}/Update",
			c.UpdateWithdrawals,
		},
	}
}

// InitiateWithdrawals - InBQ Instantiate a new Withdrawals
func (c *BQWithdrawalsAPIController) InitiateWithdrawals(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	withdrawalsParam := Withdrawals{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&withdrawalsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWithdrawalsRequired(withdrawalsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWithdrawalsConstraints(withdrawalsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateWithdrawals(r.Context(), leasingidParam, withdrawalsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveWithdrawals - ReBQ Retrieve details about any aspect of Withdrawals
func (c *BQWithdrawalsAPIController) RetrieveWithdrawals(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	withdrawalsidParam := params["withdrawalsid"]
	if withdrawalsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"withdrawalsid"}, nil)
		return
	}
	result, err := c.service.RetrieveWithdrawals(r.Context(), leasingidParam, withdrawalsidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWithdrawals - UpBQ Update details relating to Withdrawals
func (c *BQWithdrawalsAPIController) UpdateWithdrawals(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	withdrawalsidParam := params["withdrawalsid"]
	if withdrawalsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"withdrawalsid"}, nil)
		return
	}
	withdrawalsParam := Withdrawals{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&withdrawalsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWithdrawalsRequired(withdrawalsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWithdrawalsConstraints(withdrawalsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWithdrawals(r.Context(), leasingidParam, withdrawalsidParam, withdrawalsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
