// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Taxtypevalues : >  * `Valueaddedtaxofzerorate` - Tax for which a zero rate applies.  * `Provincial` - Tax is a provincial tax.  * `Nationaltax` - Tax is a national tax.  * `Statetax` - Tax is a state tax.  * `Withholdingtax` - Tax is on income deducted at source, which the paying agent is legally obliged to deduct from its payments of interest on deposits and other proceeds of a financial instrument.  * `Capitalgaintax` - Tax is on a capital gain (realised and unrealised), that is, the profit that is gained from the sale of a financial instrument.  * `Interimprofittax` - Tax is on the sum of all earnings/revenues accrued since the last dividend distribution.  * `Stampduty` - Tax is on certain documents and transactions.  * `Wealthtax` - Tax is a special tax imposed, applicable only when the value of assets or categories of assets owned by an entity are above a given ceiling defined by the tax authority. Wealth tax is not linked to income.  * `Inheritancetax` - Tax that is payable at the time of death on any items (money or otherwise), where ownership changes either upon death or within a legally specified number of years before death.  * `Solidaritysurcharge` - Tax that is levied by legal authorities for solidarity purposes.  * `Taxcredit` - Direct reduction of an individual's tax liability.  * `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive / performance fees at the end of the fiscal year.  * `Gifttax` - Tax that is levied on assets given to individuals prior to the death of the donor. Gift tax is designed to ensure the integrity of the inheritance tax, preventing the pre-death transfer of wealth.  * `Consumptiontax` - Tax that is levied on goods and services purchased by customers, and is added to the retail price.  * `Alternativeminimumtax` - Tax is an alternative minimum tax.  * `Localtax` - Tax that is charged by a local settlement system or local jurisdiction.  * `Nationalfederaltax` - Tax is a country, national, or federal tax that is usually charged by the custodian.  * `Paymentlevytax` - Tax levied on a payment.  * `Stockexchangetax` - Tax collected by a stock exchange.  * `Transactiontax` - Tax levied on a transaction.  * `Transfertax` - Tax levied on a transfer.  * `Valueaddedtax` - Tax is a value added tax.  * `Localbrokercommission` - Local broker's commission amount.  * `Executingbrokercommission` - Executing broker's commission amount.  * `Eutaxretention` - Tax withheld at source in the framework of the European Directive on taxation of savings in the form of interest payments.  * `Aktiengewinn1` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the old Investment Tax Act (Investmentsteuergesetz).  * `Aktiengewinn2` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the new Investment Tax Act (Investmentsteuergesetz).  * `Zwischengewinn` - Zwischengewinn.  * `Customstax` - Tax is customs and excise.  * `Other` - Another type of tax.  * `Mietgewinn` - Earnings from renting.  * `Germanlocaltax3` - Local tax (Zinstopf) offset interest per unit against tax exempt amount (variation to offset interest per unit in relation to tax exempt amount).  * `Germanlocaltax4` - Local tax (Ertrag Besitzanteilig) yield liable for interest down payment tax.  * `Germanlocaltax2` - Local tax (ZAS pflichtige Zinsen) - interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).  * `Withholdingofforeigntax` - Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.  * `Withholdingoflocaltax` - Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.  * `Capitallosscredit` - Tax recovery is due to capital loss.  
type Taxtypevalues string

// List of Taxtypevalues
const (
	VALUEADDEDTAXOFZERORATE Taxtypevalues = "Valueaddedtaxofzerorate"
	PROVINCIAL Taxtypevalues = "Provincial"
	NATIONALTAX Taxtypevalues = "Nationaltax"
	STATETAX Taxtypevalues = "Statetax"
	WITHHOLDINGTAX Taxtypevalues = "Withholdingtax"
	CAPITALGAINTAX Taxtypevalues = "Capitalgaintax"
	INTERIMPROFITTAX Taxtypevalues = "Interimprofittax"
	STAMPDUTY Taxtypevalues = "Stampduty"
	WEALTHTAX Taxtypevalues = "Wealthtax"
	INHERITANCETAX Taxtypevalues = "Inheritancetax"
	SOLIDARITYSURCHARGE Taxtypevalues = "Solidaritysurcharge"
	TAXCREDIT Taxtypevalues = "Taxcredit"
	EQUALISATION Taxtypevalues = "Equalisation"
	GIFTTAX Taxtypevalues = "Gifttax"
	CONSUMPTIONTAX Taxtypevalues = "Consumptiontax"
	ALTERNATIVEMINIMUMTAX Taxtypevalues = "Alternativeminimumtax"
	LOCALTAX Taxtypevalues = "Localtax"
	NATIONALFEDERALTAX Taxtypevalues = "Nationalfederaltax"
	PAYMENTLEVYTAX Taxtypevalues = "Paymentlevytax"
	STOCKEXCHANGETAX Taxtypevalues = "Stockexchangetax"
	TRANSACTIONTAX Taxtypevalues = "Transactiontax"
	TRANSFERTAX Taxtypevalues = "Transfertax"
	VALUEADDEDTAX Taxtypevalues = "Valueaddedtax"
	LOCALBROKERCOMMISSION Taxtypevalues = "Localbrokercommission"
	EXECUTINGBROKERCOMMISSION Taxtypevalues = "Executingbrokercommission"
	EUTAXRETENTION Taxtypevalues = "Eutaxretention"
	AKTIENGEWINN1 Taxtypevalues = "Aktiengewinn1"
	AKTIENGEWINN2 Taxtypevalues = "Aktiengewinn2"
	ZWISCHENGEWINN Taxtypevalues = "Zwischengewinn"
	CUSTOMSTAX Taxtypevalues = "Customstax"
	OTHER Taxtypevalues = "Other"
	MIETGEWINN Taxtypevalues = "Mietgewinn"
	GERMANLOCALTAX3 Taxtypevalues = "Germanlocaltax3"
	GERMANLOCALTAX4 Taxtypevalues = "Germanlocaltax4"
	GERMANLOCALTAX2 Taxtypevalues = "Germanlocaltax2"
	WITHHOLDINGOFFOREIGNTAX Taxtypevalues = "Withholdingofforeigntax"
	WITHHOLDINGOFLOCALTAX Taxtypevalues = "Withholdingoflocaltax"
	CAPITALLOSSCREDIT Taxtypevalues = "Capitallosscredit"
)

// AllowedTaxtypevaluesEnumValues is all the allowed values of Taxtypevalues enum
var AllowedTaxtypevaluesEnumValues = []Taxtypevalues{
	"Valueaddedtaxofzerorate",
	"Provincial",
	"Nationaltax",
	"Statetax",
	"Withholdingtax",
	"Capitalgaintax",
	"Interimprofittax",
	"Stampduty",
	"Wealthtax",
	"Inheritancetax",
	"Solidaritysurcharge",
	"Taxcredit",
	"Equalisation",
	"Gifttax",
	"Consumptiontax",
	"Alternativeminimumtax",
	"Localtax",
	"Nationalfederaltax",
	"Paymentlevytax",
	"Stockexchangetax",
	"Transactiontax",
	"Transfertax",
	"Valueaddedtax",
	"Localbrokercommission",
	"Executingbrokercommission",
	"Eutaxretention",
	"Aktiengewinn1",
	"Aktiengewinn2",
	"Zwischengewinn",
	"Customstax",
	"Other",
	"Mietgewinn",
	"Germanlocaltax3",
	"Germanlocaltax4",
	"Germanlocaltax2",
	"Withholdingofforeigntax",
	"Withholdingoflocaltax",
	"Capitallosscredit",
}

// validTaxtypevaluesEnumValue provides a map of Taxtypevaluess for fast verification of use input
var validTaxtypevaluesEnumValues = map[Taxtypevalues]struct{}{
	"Valueaddedtaxofzerorate": {},
	"Provincial": {},
	"Nationaltax": {},
	"Statetax": {},
	"Withholdingtax": {},
	"Capitalgaintax": {},
	"Interimprofittax": {},
	"Stampduty": {},
	"Wealthtax": {},
	"Inheritancetax": {},
	"Solidaritysurcharge": {},
	"Taxcredit": {},
	"Equalisation": {},
	"Gifttax": {},
	"Consumptiontax": {},
	"Alternativeminimumtax": {},
	"Localtax": {},
	"Nationalfederaltax": {},
	"Paymentlevytax": {},
	"Stockexchangetax": {},
	"Transactiontax": {},
	"Transfertax": {},
	"Valueaddedtax": {},
	"Localbrokercommission": {},
	"Executingbrokercommission": {},
	"Eutaxretention": {},
	"Aktiengewinn1": {},
	"Aktiengewinn2": {},
	"Zwischengewinn": {},
	"Customstax": {},
	"Other": {},
	"Mietgewinn": {},
	"Germanlocaltax3": {},
	"Germanlocaltax4": {},
	"Germanlocaltax2": {},
	"Withholdingofforeigntax": {},
	"Withholdingoflocaltax": {},
	"Capitallosscredit": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Taxtypevalues) IsValid() bool {
	_, ok := validTaxtypevaluesEnumValues[v]
	return ok
}

// NewTaxtypevaluesFromValue returns a pointer to a valid Taxtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxtypevaluesFromValue(v string) (Taxtypevalues, error) {
	ev := Taxtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Taxtypevalues: valid values are %v", v, AllowedTaxtypevaluesEnumValues)
}



// AssertTaxtypevaluesRequired checks if the required fields are not zero-ed
func AssertTaxtypevaluesRequired(obj Taxtypevalues) error {
	return nil
}

// AssertTaxtypevaluesConstraints checks if the values respects the defined constraints
func AssertTaxtypevaluesConstraints(obj Taxtypevalues) error {
	return nil
}
