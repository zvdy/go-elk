// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Mandatetypevalues : >  * `Consent` - Permission or Agreement obtained from someone or something having authority or power  Permission for something to happen or agreement to do something.  * `PowerOfAttorney` - A written authorization that transfers specific rights from a party to another party.  Document that transfers specific rights from a party to another party. ISO20022  * `DirectDebitMandate` - An agreement between a debtor and a creditor allowing the creditor to instruct the bank to debit the debtors account  Authorization in favour of the creditor given by the debtor to debit its own account. (ISO20022)  * `ServicingMandate` - An agreement between the customer and a service provider to authorise the service provider to access Products and Services on behalf of the customer.   
type Mandatetypevalues string

// List of Mandatetypevalues
const (
	CONSENT Mandatetypevalues = "Consent"
	POWER_OF_ATTORNEY Mandatetypevalues = "PowerOfAttorney"
	DIRECT_DEBIT_MANDATE Mandatetypevalues = "DirectDebitMandate"
	SERVICING_MANDATE Mandatetypevalues = "ServicingMandate"
)

// AllowedMandatetypevaluesEnumValues is all the allowed values of Mandatetypevalues enum
var AllowedMandatetypevaluesEnumValues = []Mandatetypevalues{
	"Consent",
	"PowerOfAttorney",
	"DirectDebitMandate",
	"ServicingMandate",
}

// validMandatetypevaluesEnumValue provides a map of Mandatetypevaluess for fast verification of use input
var validMandatetypevaluesEnumValues = map[Mandatetypevalues]struct{}{
	"Consent": {},
	"PowerOfAttorney": {},
	"DirectDebitMandate": {},
	"ServicingMandate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mandatetypevalues) IsValid() bool {
	_, ok := validMandatetypevaluesEnumValues[v]
	return ok
}

// NewMandatetypevaluesFromValue returns a pointer to a valid Mandatetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMandatetypevaluesFromValue(v string) (Mandatetypevalues, error) {
	ev := Mandatetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Mandatetypevalues: valid values are %v", v, AllowedMandatetypevaluesEnumValues)
}



// AssertMandatetypevaluesRequired checks if the required fields are not zero-ed
func AssertMandatetypevaluesRequired(obj Mandatetypevalues) error {
	return nil
}

// AssertMandatetypevaluesConstraints checks if the values respects the defined constraints
func AssertMandatetypevaluesConstraints(obj Mandatetypevalues) error {
	return nil
}
