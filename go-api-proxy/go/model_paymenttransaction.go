// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Paymenttransaction - The general payment transaction with all major attributes - some optional depending on type
type Paymenttransaction struct {

	PaymentTransactionType Paymenttypevalues `json:"PaymentTransactionType,omitempty"`

	PaymentTransactionAmount Amount `json:"PaymentTransactionAmount,omitempty"`

	PaymentTransactionIdentification Identifier `json:"PaymentTransactionIdentification,omitempty"`

	PaymentTransactionUsedMechanism Text `json:"PaymentTransactionUsedMechanism,omitempty"`

	PaymentTransactionDatetime Datetime `json:"PaymentTransactionDatetime,omitempty"`

	PaymentTransactionPurpose Paymentpurposevalues `json:"PaymentTransactionPurpose,omitempty"`

	PaymentTransactionStatus Paymenttransactionstatus `json:"PaymentTransactionStatus,omitempty"`

	PaymentTransactionAppliedFeeAmount Amount `json:"PaymentTransactionAppliedFeeAmount,omitempty"`

	PaymentTransactionCurrency Paymenttransactioncurrency `json:"PaymentTransactionCurrency,omitempty"`

	PaymentCreditDebitIndicator Debitcreditindicatortvalues `json:"PaymentCreditDebitIndicator,omitempty"`

	PaymentTransactionAmountType Amounttypevalues `json:"PaymentTransactionAmountType,omitempty"`

	PaymentTransactionDatetimeType Paymentdatetimetypevalues `json:"PaymentTransactionDatetimeType,omitempty"`
}

// AssertPaymenttransactionRequired checks if the required fields are not zero-ed
func AssertPaymenttransactionRequired(obj Paymenttransaction) error {
	if err := AssertAmountRequired(obj.PaymentTransactionAmount); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.PaymentTransactionIdentification); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.PaymentTransactionUsedMechanism); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.PaymentTransactionDatetime); err != nil {
		return err
	}
	if err := AssertPaymenttransactionstatusRequired(obj.PaymentTransactionStatus); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.PaymentTransactionAppliedFeeAmount); err != nil {
		return err
	}
	if err := AssertPaymenttransactioncurrencyRequired(obj.PaymentTransactionCurrency); err != nil {
		return err
	}
	return nil
}

// AssertPaymenttransactionConstraints checks if the values respects the defined constraints
func AssertPaymenttransactionConstraints(obj Paymenttransaction) error {
	if err := AssertAmountConstraints(obj.PaymentTransactionAmount); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.PaymentTransactionIdentification); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.PaymentTransactionUsedMechanism); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.PaymentTransactionDatetime); err != nil {
		return err
	}
	if err := AssertPaymenttransactionstatusConstraints(obj.PaymentTransactionStatus); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.PaymentTransactionAppliedFeeAmount); err != nil {
		return err
	}
	if err := AssertPaymenttransactioncurrencyConstraints(obj.PaymentTransactionCurrency); err != nil {
		return err
	}
	return nil
}
