// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Feecalculationmethodtypevalues : >  * `Flat` - Charge/tax basis is a lump sum.  * `Perunit` - Charges/tax basis is per unit of financial instrument.  * `Percentage` - Charge/tax basis is a percentage.  * `Rateperbrackets` - Charge/tax basis is a percentage which depends on the tax brackets.  * `Ratewithminimumamount` - Rate with a minimum amount.  * `Ratewithmaximumamount` - Rate with a maximum amount.  * `Other` - Another type of taxation basis.  * `Grossamount` - Charge/Commission/tax basis is based on the gross amount.  * `Netamount` - Charge/commission/tax basis is based on the net amount.  * `Netassetvalueprice` - Charge/tax basis is the price.  
type Feecalculationmethodtypevalues string

// List of Feecalculationmethodtypevalues
const (
	FLAT Feecalculationmethodtypevalues = "Flat"
	PERUNIT Feecalculationmethodtypevalues = "Perunit"
	PERCENTAGE Feecalculationmethodtypevalues = "Percentage"
	RATEPERBRACKETS Feecalculationmethodtypevalues = "Rateperbrackets"
	RATEWITHMINIMUMAMOUNT Feecalculationmethodtypevalues = "Ratewithminimumamount"
	RATEWITHMAXIMUMAMOUNT Feecalculationmethodtypevalues = "Ratewithmaximumamount"
	OTHER Feecalculationmethodtypevalues = "Other"
	GROSSAMOUNT Feecalculationmethodtypevalues = "Grossamount"
	NETAMOUNT Feecalculationmethodtypevalues = "Netamount"
	NETASSETVALUEPRICE Feecalculationmethodtypevalues = "Netassetvalueprice"
)

// AllowedFeecalculationmethodtypevaluesEnumValues is all the allowed values of Feecalculationmethodtypevalues enum
var AllowedFeecalculationmethodtypevaluesEnumValues = []Feecalculationmethodtypevalues{
	"Flat",
	"Perunit",
	"Percentage",
	"Rateperbrackets",
	"Ratewithminimumamount",
	"Ratewithmaximumamount",
	"Other",
	"Grossamount",
	"Netamount",
	"Netassetvalueprice",
}

// validFeecalculationmethodtypevaluesEnumValue provides a map of Feecalculationmethodtypevaluess for fast verification of use input
var validFeecalculationmethodtypevaluesEnumValues = map[Feecalculationmethodtypevalues]struct{}{
	"Flat": {},
	"Perunit": {},
	"Percentage": {},
	"Rateperbrackets": {},
	"Ratewithminimumamount": {},
	"Ratewithmaximumamount": {},
	"Other": {},
	"Grossamount": {},
	"Netamount": {},
	"Netassetvalueprice": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Feecalculationmethodtypevalues) IsValid() bool {
	_, ok := validFeecalculationmethodtypevaluesEnumValues[v]
	return ok
}

// NewFeecalculationmethodtypevaluesFromValue returns a pointer to a valid Feecalculationmethodtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeecalculationmethodtypevaluesFromValue(v string) (Feecalculationmethodtypevalues, error) {
	ev := Feecalculationmethodtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Feecalculationmethodtypevalues: valid values are %v", v, AllowedFeecalculationmethodtypevaluesEnumValues)
}



// AssertFeecalculationmethodtypevaluesRequired checks if the required fields are not zero-ed
func AssertFeecalculationmethodtypevaluesRequired(obj Feecalculationmethodtypevalues) error {
	return nil
}

// AssertFeecalculationmethodtypevaluesConstraints checks if the values respects the defined constraints
func AssertFeecalculationmethodtypevaluesConstraints(obj Feecalculationmethodtypevalues) error {
	return nil
}
