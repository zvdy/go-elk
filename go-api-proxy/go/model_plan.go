// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Plan - 
type Plan struct {

	PlanGoal Goal `json:"PlanGoal,omitempty"`

	PlanBudget Budgetarrangement `json:"PlanBudget,omitempty"`

	PlannedAction Plannedaction `json:"PlannedAction,omitempty"`

	PlanType Plantype `json:"PlanType,omitempty"`

	// 
	PlanOrganisation string `json:"PlanOrganisation,omitempty"`

	PlanValidityPeriod Datetimeperiod `json:"PlanValidityPeriod,omitempty"`

	PlanDescription Text `json:"PlanDescription,omitempty"`
}

// AssertPlanRequired checks if the required fields are not zero-ed
func AssertPlanRequired(obj Plan) error {
	if err := AssertGoalRequired(obj.PlanGoal); err != nil {
		return err
	}
	if err := AssertBudgetarrangementRequired(obj.PlanBudget); err != nil {
		return err
	}
	if err := AssertPlannedactionRequired(obj.PlannedAction); err != nil {
		return err
	}
	if err := AssertPlantypeRequired(obj.PlanType); err != nil {
		return err
	}
	if err := AssertDatetimeperiodRequired(obj.PlanValidityPeriod); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.PlanDescription); err != nil {
		return err
	}
	return nil
}

// AssertPlanConstraints checks if the values respects the defined constraints
func AssertPlanConstraints(obj Plan) error {
	if err := AssertGoalConstraints(obj.PlanGoal); err != nil {
		return err
	}
	if err := AssertBudgetarrangementConstraints(obj.PlanBudget); err != nil {
		return err
	}
	if err := AssertPlannedactionConstraints(obj.PlannedAction); err != nil {
		return err
	}
	if err := AssertPlantypeConstraints(obj.PlanType); err != nil {
		return err
	}
	if err := AssertDatetimeperiodConstraints(obj.PlanValidityPeriod); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.PlanDescription); err != nil {
		return err
	}
	return nil
}
