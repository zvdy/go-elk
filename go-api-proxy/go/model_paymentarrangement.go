// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Paymentarrangement - Configuration setting for various payment transaction types
type Paymentarrangement struct {

	ServiceType Paymentservicetypevalues `json:"ServiceType,omitempty"`

	PaymentDate Datetime `json:"PaymentDate,omitempty"`

	PaymentPeriod Datetimeperiod `json:"PaymentPeriod,omitempty"`

	PaymentPurpose Paymentpurposevalues `json:"PaymentPurpose,omitempty"`

	PaymentAmount Amount `json:"PaymentAmount,omitempty"`

	PaymentMethod Paymentmethodtypevalues `json:"PaymentMethod,omitempty"`

	PaymentDateType Paymentdatetimetypevalues `json:"PaymentDateType,omitempty"`

	PaymentType Paymenttypevalues `json:"PaymentType,omitempty"`

	PaymentAmountType Amounttypevalues `json:"PaymentAmountType,omitempty"`

	PaymentTime Paymenttimevalues `json:"PaymentTime,omitempty"`
}

// AssertPaymentarrangementRequired checks if the required fields are not zero-ed
func AssertPaymentarrangementRequired(obj Paymentarrangement) error {
	if err := AssertDatetimeRequired(obj.PaymentDate); err != nil {
		return err
	}
	if err := AssertDatetimeperiodRequired(obj.PaymentPeriod); err != nil {
		return err
	}
	if err := AssertAmountRequired(obj.PaymentAmount); err != nil {
		return err
	}
	return nil
}

// AssertPaymentarrangementConstraints checks if the values respects the defined constraints
func AssertPaymentarrangementConstraints(obj Paymentarrangement) error {
	if err := AssertDatetimeConstraints(obj.PaymentDate); err != nil {
		return err
	}
	if err := AssertDatetimeperiodConstraints(obj.PaymentPeriod); err != nil {
		return err
	}
	if err := AssertAmountConstraints(obj.PaymentAmount); err != nil {
		return err
	}
	return nil
}
