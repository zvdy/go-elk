// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Accountdatetypevalues : >  * `OpeningDate` - Date on which the account and related basic services are effectively operational for the account owner. (ISO20022)  * `ClosingDate` - Date on which the account and related services cease effectively to be operational for the account owner. (ISO20022)  * `BlockingDate` -   * `MaturityDate` - Maturity date for the account.  * `LiveDate` -   
type Accountdatetypevalues string

// List of Accountdatetypevalues
const (
	OPENING_DATE Accountdatetypevalues = "OpeningDate"
	CLOSING_DATE Accountdatetypevalues = "ClosingDate"
	BLOCKING_DATE Accountdatetypevalues = "BlockingDate"
	MATURITY_DATE Accountdatetypevalues = "MaturityDate"
	LIVE_DATE Accountdatetypevalues = "LiveDate"
)

// AllowedAccountdatetypevaluesEnumValues is all the allowed values of Accountdatetypevalues enum
var AllowedAccountdatetypevaluesEnumValues = []Accountdatetypevalues{
	"OpeningDate",
	"ClosingDate",
	"BlockingDate",
	"MaturityDate",
	"LiveDate",
}

// validAccountdatetypevaluesEnumValue provides a map of Accountdatetypevaluess for fast verification of use input
var validAccountdatetypevaluesEnumValues = map[Accountdatetypevalues]struct{}{
	"OpeningDate": {},
	"ClosingDate": {},
	"BlockingDate": {},
	"MaturityDate": {},
	"LiveDate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Accountdatetypevalues) IsValid() bool {
	_, ok := validAccountdatetypevaluesEnumValues[v]
	return ok
}

// NewAccountdatetypevaluesFromValue returns a pointer to a valid Accountdatetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountdatetypevaluesFromValue(v string) (Accountdatetypevalues, error) {
	ev := Accountdatetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Accountdatetypevalues: valid values are %v", v, AllowedAccountdatetypevaluesEnumValues)
}



// AssertAccountdatetypevaluesRequired checks if the required fields are not zero-ed
func AssertAccountdatetypevaluesRequired(obj Accountdatetypevalues) error {
	return nil
}

// AssertAccountdatetypevaluesConstraints checks if the values respects the defined constraints
func AssertAccountdatetypevaluesConstraints(obj Accountdatetypevalues) error {
	return nil
}
