// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQInterestAPIController binds http requests to an api service and writes the service results to the http response
type BQInterestAPIController struct {
	service BQInterestAPIServicer
	errorHandler ErrorHandler
}

// BQInterestAPIOption for how the controller is set up.
type BQInterestAPIOption func(*BQInterestAPIController)

// WithBQInterestAPIErrorHandler inject ErrorHandler into controller
func WithBQInterestAPIErrorHandler(h ErrorHandler) BQInterestAPIOption {
	return func(c *BQInterestAPIController) {
		c.errorHandler = h
	}
}

// NewBQInterestAPIController creates a default api controller
func NewBQInterestAPIController(s BQInterestAPIServicer, opts ...BQInterestAPIOption) *BQInterestAPIController {
	controller := &BQInterestAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQInterestAPIController
func (c *BQInterestAPIController) Routes() Routes {
	return Routes{
		"RetrieveInterest": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Interest/{interestid}/Retrieve",
			c.RetrieveInterest,
		},
		"UpdateInterest": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Interest/{interestid}/Update",
			c.UpdateInterest,
		},
	}
}

// RetrieveInterest - ReBQ Retrieve details about any aspect of Interest
func (c *BQInterestAPIController) RetrieveInterest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	interestidParam := params["interestid"]
	if interestidParam == "" {
		c.errorHandler(w, r, &RequiredError{"interestid"}, nil)
		return
	}
	result, err := c.service.RetrieveInterest(r.Context(), leasingidParam, interestidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateInterest - UpBQ Update details relating to Interest
func (c *BQInterestAPIController) UpdateInterest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	interestidParam := params["interestid"]
	if interestidParam == "" {
		c.errorHandler(w, r, &RequiredError{"interestid"}, nil)
		return
	}
	interestParam := Interest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&interestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInterestRequired(interestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInterestConstraints(interestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateInterest(r.Context(), leasingidParam, interestidParam, interestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
