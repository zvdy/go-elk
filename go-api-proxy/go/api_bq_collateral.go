// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQCollateralAPIController binds http requests to an api service and writes the service results to the http response
type BQCollateralAPIController struct {
	service BQCollateralAPIServicer
	errorHandler ErrorHandler
}

// BQCollateralAPIOption for how the controller is set up.
type BQCollateralAPIOption func(*BQCollateralAPIController)

// WithBQCollateralAPIErrorHandler inject ErrorHandler into controller
func WithBQCollateralAPIErrorHandler(h ErrorHandler) BQCollateralAPIOption {
	return func(c *BQCollateralAPIController) {
		c.errorHandler = h
	}
}

// NewBQCollateralAPIController creates a default api controller
func NewBQCollateralAPIController(s BQCollateralAPIServicer, opts ...BQCollateralAPIOption) *BQCollateralAPIController {
	controller := &BQCollateralAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQCollateralAPIController
func (c *BQCollateralAPIController) Routes() Routes {
	return Routes{
		"InitiateCollateral": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Collateral/Initiate",
			c.InitiateCollateral,
		},
		"RetrieveCollateral": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Collateral/{collateralid}/Retrieve",
			c.RetrieveCollateral,
		},
		"RequestCollateral": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Collateral/{collateralid}/Request",
			c.RequestCollateral,
		},
		"UpdateCollateral": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Collateral/{collateralid}/Update",
			c.UpdateCollateral,
		},
	}
}

// InitiateCollateral - InBQ Instantiate a new Collateral
func (c *BQCollateralAPIController) InitiateCollateral(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	collateralParam := Collateral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&collateralParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCollateralRequired(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCollateralConstraints(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateCollateral(r.Context(), leasingidParam, collateralParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveCollateral - ReBQ Retrieve details about any aspect of Collateral
func (c *BQCollateralAPIController) RetrieveCollateral(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	collateralidParam := params["collateralid"]
	if collateralidParam == "" {
		c.errorHandler(w, r, &RequiredError{"collateralid"}, nil)
		return
	}
	result, err := c.service.RetrieveCollateral(r.Context(), leasingidParam, collateralidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestCollateral - RqBQ Request manual intervention or a decision with respect to Collateral
func (c *BQCollateralAPIController) RequestCollateral(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	collateralidParam := params["collateralid"]
	if collateralidParam == "" {
		c.errorHandler(w, r, &RequiredError{"collateralid"}, nil)
		return
	}
	collateralParam := Collateral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&collateralParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCollateralRequired(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCollateralConstraints(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RequestCollateral(r.Context(), leasingidParam, collateralidParam, collateralParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCollateral - UpBQ Update details relating to Collateral
func (c *BQCollateralAPIController) UpdateCollateral(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	collateralidParam := params["collateralid"]
	if collateralidParam == "" {
		c.errorHandler(w, r, &RequiredError{"collateralid"}, nil)
		return
	}
	collateralParam := Collateral{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&collateralParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCollateralRequired(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCollateralConstraints(collateralParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCollateral(r.Context(), leasingidParam, collateralidParam, collateralParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
