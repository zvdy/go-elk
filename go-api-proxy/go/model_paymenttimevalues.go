// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymenttimevalues : >  * `Paymentondelivery` - Code for payment on delivery.  * `Endofmonthofdelivery` - Code for payment at end of month of delivery.  * `Endofperiodafterdelivery` - Code for payment at end of period after delivery.  * `Endofperiodafterendofdeliverymonth` - Code for payment at end of period after end of month of delivery.  * `Paymentonreceiptofinvoice` - Code for payment on receipt of invoice.  * `Endofperiodafterendofreceiptmonth` - Code for payment at end of period after end of month of receipt of invoice.  * `Endofperiodafterreceipt` - Code for payment at end of period after receipt of invoice.  * `Endofmonthofreceipt` - Code for payment at end of month of receipt of invoice.  * `Endofperiodaftermatch` - Code for payment at end of period after match or mismatch acceptance.  * `Endofperiodaftershipmentdate` - Payment at end of period after shipment date.  * `Endofperiodafterpurchaseorderdate` - Payment at end of period after purchase order date.  * `Endofperiodafterbaselineestablishment` - Payment at end of period after baseline establishment date.  * `Endofperiodafterinvoicedate` - Payment at end of period after invoice date.  
type Paymenttimevalues string

// List of Paymenttimevalues
const (
	PAYMENTONDELIVERY Paymenttimevalues = "Paymentondelivery"
	ENDOFMONTHOFDELIVERY Paymenttimevalues = "Endofmonthofdelivery"
	ENDOFPERIODAFTERDELIVERY Paymenttimevalues = "Endofperiodafterdelivery"
	ENDOFPERIODAFTERENDOFDELIVERYMONTH Paymenttimevalues = "Endofperiodafterendofdeliverymonth"
	PAYMENTONRECEIPTOFINVOICE Paymenttimevalues = "Paymentonreceiptofinvoice"
	ENDOFPERIODAFTERENDOFRECEIPTMONTH Paymenttimevalues = "Endofperiodafterendofreceiptmonth"
	ENDOFPERIODAFTERRECEIPT Paymenttimevalues = "Endofperiodafterreceipt"
	ENDOFMONTHOFRECEIPT Paymenttimevalues = "Endofmonthofreceipt"
	ENDOFPERIODAFTERMATCH Paymenttimevalues = "Endofperiodaftermatch"
	ENDOFPERIODAFTERSHIPMENTDATE Paymenttimevalues = "Endofperiodaftershipmentdate"
	ENDOFPERIODAFTERPURCHASEORDERDATE Paymenttimevalues = "Endofperiodafterpurchaseorderdate"
	ENDOFPERIODAFTERBASELINEESTABLISHMENT Paymenttimevalues = "Endofperiodafterbaselineestablishment"
	ENDOFPERIODAFTERINVOICEDATE Paymenttimevalues = "Endofperiodafterinvoicedate"
)

// AllowedPaymenttimevaluesEnumValues is all the allowed values of Paymenttimevalues enum
var AllowedPaymenttimevaluesEnumValues = []Paymenttimevalues{
	"Paymentondelivery",
	"Endofmonthofdelivery",
	"Endofperiodafterdelivery",
	"Endofperiodafterendofdeliverymonth",
	"Paymentonreceiptofinvoice",
	"Endofperiodafterendofreceiptmonth",
	"Endofperiodafterreceipt",
	"Endofmonthofreceipt",
	"Endofperiodaftermatch",
	"Endofperiodaftershipmentdate",
	"Endofperiodafterpurchaseorderdate",
	"Endofperiodafterbaselineestablishment",
	"Endofperiodafterinvoicedate",
}

// validPaymenttimevaluesEnumValue provides a map of Paymenttimevaluess for fast verification of use input
var validPaymenttimevaluesEnumValues = map[Paymenttimevalues]struct{}{
	"Paymentondelivery": {},
	"Endofmonthofdelivery": {},
	"Endofperiodafterdelivery": {},
	"Endofperiodafterendofdeliverymonth": {},
	"Paymentonreceiptofinvoice": {},
	"Endofperiodafterendofreceiptmonth": {},
	"Endofperiodafterreceipt": {},
	"Endofmonthofreceipt": {},
	"Endofperiodaftermatch": {},
	"Endofperiodaftershipmentdate": {},
	"Endofperiodafterpurchaseorderdate": {},
	"Endofperiodafterbaselineestablishment": {},
	"Endofperiodafterinvoicedate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymenttimevalues) IsValid() bool {
	_, ok := validPaymenttimevaluesEnumValues[v]
	return ok
}

// NewPaymenttimevaluesFromValue returns a pointer to a valid Paymenttimevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymenttimevaluesFromValue(v string) (Paymenttimevalues, error) {
	ev := Paymenttimevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymenttimevalues: valid values are %v", v, AllowedPaymenttimevaluesEnumValues)
}



// AssertPaymenttimevaluesRequired checks if the required fields are not zero-ed
func AssertPaymenttimevaluesRequired(obj Paymenttimevalues) error {
	return nil
}

// AssertPaymenttimevaluesConstraints checks if the values respects the defined constraints
func AssertPaymenttimevaluesConstraints(obj Paymenttimevalues) error {
	return nil
}
