// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BQDepositsAPIController binds http requests to an api service and writes the service results to the http response
type BQDepositsAPIController struct {
	service BQDepositsAPIServicer
	errorHandler ErrorHandler
}

// BQDepositsAPIOption for how the controller is set up.
type BQDepositsAPIOption func(*BQDepositsAPIController)

// WithBQDepositsAPIErrorHandler inject ErrorHandler into controller
func WithBQDepositsAPIErrorHandler(h ErrorHandler) BQDepositsAPIOption {
	return func(c *BQDepositsAPIController) {
		c.errorHandler = h
	}
}

// NewBQDepositsAPIController creates a default api controller
func NewBQDepositsAPIController(s BQDepositsAPIServicer, opts ...BQDepositsAPIOption) *BQDepositsAPIController {
	controller := &BQDepositsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BQDepositsAPIController
func (c *BQDepositsAPIController) Routes() Routes {
	return Routes{
		"InitiateDeposits": Route{
			strings.ToUpper("Post"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Deposits/Initiate",
			c.InitiateDeposits,
		},
		"RetrieveDeposits": Route{
			strings.ToUpper("Get"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Deposits/{depositsid}/Retrieve",
			c.RetrieveDeposits,
		},
		"UpdateDeposits": Route{
			strings.ToUpper("Put"),
			"/B154/BIAN/Leasing/12.0.0/Leasing/{leasingid}/Deposits/{depositsid}/Update",
			c.UpdateDeposits,
		},
	}
}

// InitiateDeposits - InBQ Instantiate a new Deposits
func (c *BQDepositsAPIController) InitiateDeposits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	depositsParam := Deposits{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&depositsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDepositsRequired(depositsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDepositsConstraints(depositsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InitiateDeposits(r.Context(), leasingidParam, depositsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RetrieveDeposits - ReBQ Retrieve details about any aspect of Deposits
func (c *BQDepositsAPIController) RetrieveDeposits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	depositsidParam := params["depositsid"]
	if depositsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"depositsid"}, nil)
		return
	}
	result, err := c.service.RetrieveDeposits(r.Context(), leasingidParam, depositsidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDeposits - UpBQ Update details relating to Deposits
func (c *BQDepositsAPIController) UpdateDeposits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	leasingidParam := params["leasingid"]
	if leasingidParam == "" {
		c.errorHandler(w, r, &RequiredError{"leasingid"}, nil)
		return
	}
	depositsidParam := params["depositsid"]
	if depositsidParam == "" {
		c.errorHandler(w, r, &RequiredError{"depositsid"}, nil)
		return
	}
	depositsParam := Deposits{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&depositsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDepositsRequired(depositsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDepositsConstraints(depositsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDeposits(r.Context(), leasingidParam, depositsidParam, depositsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
