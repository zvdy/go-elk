// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Account - Reference to the account which is linked to Leasing Arrangement Account|Account  (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()
type Account struct {

	AccountStatus Accountstatus `json:"AccountStatus,omitempty"`

	AccountIdentification Accountidentification `json:"AccountIdentification,omitempty"`

	AccountDate Accountdate `json:"AccountDate,omitempty"`

	AccountType Accounttype `json:"AccountType,omitempty"`

	AccountPurpose Text `json:"AccountPurpose,omitempty"`

	AccountBalance Accountbalance `json:"AccountBalance,omitempty"`

	AccountCurrency Accountcurrency `json:"AccountCurrency,omitempty"`

	AccountDescription Text `json:"AccountDescription,omitempty"`

	AccountName Name `json:"AccountName,omitempty"`
}

// AssertAccountRequired checks if the required fields are not zero-ed
func AssertAccountRequired(obj Account) error {
	if err := AssertAccountstatusRequired(obj.AccountStatus); err != nil {
		return err
	}
	if err := AssertAccountidentificationRequired(obj.AccountIdentification); err != nil {
		return err
	}
	if err := AssertAccountdateRequired(obj.AccountDate); err != nil {
		return err
	}
	if err := AssertAccounttypeRequired(obj.AccountType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.AccountPurpose); err != nil {
		return err
	}
	if err := AssertAccountbalanceRequired(obj.AccountBalance); err != nil {
		return err
	}
	if err := AssertAccountcurrencyRequired(obj.AccountCurrency); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.AccountDescription); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.AccountName); err != nil {
		return err
	}
	return nil
}

// AssertAccountConstraints checks if the values respects the defined constraints
func AssertAccountConstraints(obj Account) error {
	if err := AssertAccountstatusConstraints(obj.AccountStatus); err != nil {
		return err
	}
	if err := AssertAccountidentificationConstraints(obj.AccountIdentification); err != nil {
		return err
	}
	if err := AssertAccountdateConstraints(obj.AccountDate); err != nil {
		return err
	}
	if err := AssertAccounttypeConstraints(obj.AccountType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.AccountPurpose); err != nil {
		return err
	}
	if err := AssertAccountbalanceConstraints(obj.AccountBalance); err != nil {
		return err
	}
	if err := AssertAccountcurrencyConstraints(obj.AccountCurrency); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.AccountDescription); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.AccountName); err != nil {
		return err
	}
	return nil
}
