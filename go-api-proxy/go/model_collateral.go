// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Collateral - The product features/services available with a financical facility
type Collateral struct {

	CollateralPreconditions Condition `json:"CollateralPreconditions,omitempty"`

	CollateralFeatureSchedule Schedule `json:"CollateralFeatureSchedule,omitempty"`

	BusinessService Businessservice `json:"BusinessService,omitempty"`

	CollateralPostconditions Condition `json:"CollateralPostconditions,omitempty"`

	CollateralServiceType Text `json:"CollateralServiceType,omitempty"`

	CollateralServiceDescription Text `json:"CollateralServiceDescription,omitempty"`

	CollateralServiceInputsandOuputs Text `json:"CollateralServiceInputsandOuputs,omitempty"`

	CollateralServiceWorkProduct Workproduct `json:"CollateralServiceWorkProduct,omitempty"`

	CollateralServiceName Name `json:"CollateralServiceName,omitempty"`
}

// AssertCollateralRequired checks if the required fields are not zero-ed
func AssertCollateralRequired(obj Collateral) error {
	if err := AssertConditionRequired(obj.CollateralPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.CollateralFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceRequired(obj.BusinessService); err != nil {
		return err
	}
	if err := AssertConditionRequired(obj.CollateralPostconditions); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CollateralServiceType); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CollateralServiceDescription); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.CollateralServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductRequired(obj.CollateralServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.CollateralServiceName); err != nil {
		return err
	}
	return nil
}

// AssertCollateralConstraints checks if the values respects the defined constraints
func AssertCollateralConstraints(obj Collateral) error {
	if err := AssertConditionConstraints(obj.CollateralPreconditions); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.CollateralFeatureSchedule); err != nil {
		return err
	}
	if err := AssertBusinessserviceConstraints(obj.BusinessService); err != nil {
		return err
	}
	if err := AssertConditionConstraints(obj.CollateralPostconditions); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CollateralServiceType); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CollateralServiceDescription); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.CollateralServiceInputsandOuputs); err != nil {
		return err
	}
	if err := AssertWorkproductConstraints(obj.CollateralServiceWorkProduct); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.CollateralServiceName); err != nil {
		return err
	}
	return nil
}
