// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Feetypevalues : >  * `Accountingfee` - Fee paid for accounting services rendered.  * `Adrfee` - Charge linked to an ADR (American Depositary Receipt).  * `Advisoryfee` - Fee paid for advisory services rendered.  * `Airwaybillfee` - Charge is an airway bill fee.  * `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.  * `Brokeragefee` - Fee paid to a broker for services provided.  * `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.  * `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.  * `Collectfreight` - Charge is for the collection of the freight.  * `Commission` - Fee paid for services provided.  * `Contingencydeferredsalescharge` - Deferred sales charge.  * `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.  * `Custodyfee` - Fee paid to a custodian in respect of custodial services.  * `Dangerousgoodsfee` - Charge is for dangerous goods.  * `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.  * `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.  * `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.  * `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.  * `Initial` - Charge paid at the time of the first subscription.  * `Insurancepremium` - Charge is a premium for insurance.  * `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.  * `Issuancefee` - Charge linked to the issuance of security.  * `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.  * `Matchingfees` - Fee charged for matching and/or confirmation.  * `Miscellaneousfee` - Miscellaneous fee.  * `Other` - Another type of charge.  * `Packaging` - Charge is for packaging of goods.  * `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.  * `Penalty` - Fee charged to the investor for early redemption of the fund.  * `Pickup` - Charge is for pick-up of goods.  * `Postagecharge` - Charge paid for the postage.  * `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.  * `Publicationfee` - Fee paid in respect of publications made.  * `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.  * `Securitycharge` - Charge is for security.  * `Serviceprovisionfee` - Fee paid for the provision of financial services.  * `Shippingcharge` - Charge for shipping, including the insurance of securities.  * `Signatureservice` - Charge is for signature services.  * `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.  * `Speciallyagreedfrontendload` - Specially agreed front-end load.  * `Storageatdestination` - Charge is for storage of goods at destination.  * `Storageatorigin` - Charge is for storage of goods at origin.  * `Switch` - In investment funds, charge related to a switch transaction.  * `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.  * `Transportcharges` - Charge is for transport.  * `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.  
type Feetypevalues string

// List of Feetypevalues
const (
	ACCOUNTINGFEE Feetypevalues = "Accountingfee"
	ADRFEE Feetypevalues = "Adrfee"
	ADVISORYFEE Feetypevalues = "Advisoryfee"
	AIRWAYBILLFEE Feetypevalues = "Airwaybillfee"
	BACKENDLOAD Feetypevalues = "Backendload"
	BROKERAGEFEE Feetypevalues = "Brokeragefee"
	CLEARANCEANDHANDLINGATDESTINATION Feetypevalues = "Clearanceandhandlingatdestination"
	CLEARANCEANDHANDLINGATORIGIN Feetypevalues = "Clearanceandhandlingatorigin"
	COLLECTFREIGHT Feetypevalues = "Collectfreight"
	COMMISSION Feetypevalues = "Commission"
	CONTINGENCYDEFERREDSALESCHARGE Feetypevalues = "Contingencydeferredsalescharge"
	CORRESPONDENTBANKCHARGE Feetypevalues = "Correspondentbankcharge"
	CUSTODYFEE Feetypevalues = "Custodyfee"
	DANGEROUSGOODSFEE Feetypevalues = "Dangerousgoodsfee"
	DILUTIONLEVY Feetypevalues = "Dilutionlevy"
	DISCOUNT Feetypevalues = "Discount"
	EQUALISATION Feetypevalues = "Equalisation"
	FRONTENDLOAD Feetypevalues = "Frontendload"
	INITIAL Feetypevalues = "Initial"
	INSURANCEPREMIUM Feetypevalues = "Insurancepremium"
	ISSUANCECANCELLATIONFEE Feetypevalues = "Issuancecancellationfee"
	ISSUANCEFEE Feetypevalues = "Issuancefee"
	MANAGEMENTFEE Feetypevalues = "Managementfee"
	MATCHINGFEES Feetypevalues = "Matchingfees"
	MISCELLANEOUSFEE Feetypevalues = "Miscellaneousfee"
	OTHER Feetypevalues = "Other"
	PACKAGING Feetypevalues = "Packaging"
	PARTACQUIS Feetypevalues = "Partacquis"
	PENALTY Feetypevalues = "Penalty"
	PICKUP Feetypevalues = "Pickup"
	POSTAGECHARGE Feetypevalues = "Postagecharge"
	PREMIUM Feetypevalues = "Premium"
	PUBLICATIONFEE Feetypevalues = "Publicationfee"
	REGULATORYFEE Feetypevalues = "Regulatoryfee"
	SECURITYCHARGE Feetypevalues = "Securitycharge"
	SERVICEPROVISIONFEE Feetypevalues = "Serviceprovisionfee"
	SHIPPINGCHARGE Feetypevalues = "Shippingcharge"
	SIGNATURESERVICE Feetypevalues = "Signatureservice"
	SPECIALCONCESSIONS Feetypevalues = "Specialconcessions"
	SPECIALLYAGREEDFRONTENDLOAD Feetypevalues = "Speciallyagreedfrontendload"
	STORAGEATDESTINATION Feetypevalues = "Storageatdestination"
	STORAGEATORIGIN Feetypevalues = "Storageatorigin"
	SWITCH Feetypevalues = "Switch"
	TRANSFERFEE Feetypevalues = "Transferfee"
	TRANSPORTCHARGES Feetypevalues = "Transportcharges"
	UCITSCOMMISSION Feetypevalues = "Ucitscommission"
)

// AllowedFeetypevaluesEnumValues is all the allowed values of Feetypevalues enum
var AllowedFeetypevaluesEnumValues = []Feetypevalues{
	"Accountingfee",
	"Adrfee",
	"Advisoryfee",
	"Airwaybillfee",
	"Backendload",
	"Brokeragefee",
	"Clearanceandhandlingatdestination",
	"Clearanceandhandlingatorigin",
	"Collectfreight",
	"Commission",
	"Contingencydeferredsalescharge",
	"Correspondentbankcharge",
	"Custodyfee",
	"Dangerousgoodsfee",
	"Dilutionlevy",
	"Discount",
	"Equalisation",
	"Frontendload",
	"Initial",
	"Insurancepremium",
	"Issuancecancellationfee",
	"Issuancefee",
	"Managementfee",
	"Matchingfees",
	"Miscellaneousfee",
	"Other",
	"Packaging",
	"Partacquis",
	"Penalty",
	"Pickup",
	"Postagecharge",
	"Premium",
	"Publicationfee",
	"Regulatoryfee",
	"Securitycharge",
	"Serviceprovisionfee",
	"Shippingcharge",
	"Signatureservice",
	"Specialconcessions",
	"Speciallyagreedfrontendload",
	"Storageatdestination",
	"Storageatorigin",
	"Switch",
	"Transferfee",
	"Transportcharges",
	"Ucitscommission",
}

// validFeetypevaluesEnumValue provides a map of Feetypevaluess for fast verification of use input
var validFeetypevaluesEnumValues = map[Feetypevalues]struct{}{
	"Accountingfee": {},
	"Adrfee": {},
	"Advisoryfee": {},
	"Airwaybillfee": {},
	"Backendload": {},
	"Brokeragefee": {},
	"Clearanceandhandlingatdestination": {},
	"Clearanceandhandlingatorigin": {},
	"Collectfreight": {},
	"Commission": {},
	"Contingencydeferredsalescharge": {},
	"Correspondentbankcharge": {},
	"Custodyfee": {},
	"Dangerousgoodsfee": {},
	"Dilutionlevy": {},
	"Discount": {},
	"Equalisation": {},
	"Frontendload": {},
	"Initial": {},
	"Insurancepremium": {},
	"Issuancecancellationfee": {},
	"Issuancefee": {},
	"Managementfee": {},
	"Matchingfees": {},
	"Miscellaneousfee": {},
	"Other": {},
	"Packaging": {},
	"Partacquis": {},
	"Penalty": {},
	"Pickup": {},
	"Postagecharge": {},
	"Premium": {},
	"Publicationfee": {},
	"Regulatoryfee": {},
	"Securitycharge": {},
	"Serviceprovisionfee": {},
	"Shippingcharge": {},
	"Signatureservice": {},
	"Specialconcessions": {},
	"Speciallyagreedfrontendload": {},
	"Storageatdestination": {},
	"Storageatorigin": {},
	"Switch": {},
	"Transferfee": {},
	"Transportcharges": {},
	"Ucitscommission": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Feetypevalues) IsValid() bool {
	_, ok := validFeetypevaluesEnumValues[v]
	return ok
}

// NewFeetypevaluesFromValue returns a pointer to a valid Feetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeetypevaluesFromValue(v string) (Feetypevalues, error) {
	ev := Feetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Feetypevalues: valid values are %v", v, AllowedFeetypevaluesEnumValues)
}



// AssertFeetypevaluesRequired checks if the required fields are not zero-ed
func AssertFeetypevaluesRequired(obj Feetypevalues) error {
	return nil
}

// AssertFeetypevaluesConstraints checks if the values respects the defined constraints
func AssertFeetypevaluesConstraints(obj Feetypevalues) error {
	return nil
}
