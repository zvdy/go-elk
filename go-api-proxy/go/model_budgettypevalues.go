// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Budgettypevalues : >  * `OperatingBudget` -   * `FinancialBudget` -   * `ResourceBudget` -   
type Budgettypevalues string

// List of Budgettypevalues
const (
	OPERATING_BUDGET Budgettypevalues = "OperatingBudget"
	FINANCIAL_BUDGET Budgettypevalues = "FinancialBudget"
	RESOURCE_BUDGET Budgettypevalues = "ResourceBudget"
)

// AllowedBudgettypevaluesEnumValues is all the allowed values of Budgettypevalues enum
var AllowedBudgettypevaluesEnumValues = []Budgettypevalues{
	"OperatingBudget",
	"FinancialBudget",
	"ResourceBudget",
}

// validBudgettypevaluesEnumValue provides a map of Budgettypevaluess for fast verification of use input
var validBudgettypevaluesEnumValues = map[Budgettypevalues]struct{}{
	"OperatingBudget": {},
	"FinancialBudget": {},
	"ResourceBudget": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Budgettypevalues) IsValid() bool {
	_, ok := validBudgettypevaluesEnumValues[v]
	return ok
}

// NewBudgettypevaluesFromValue returns a pointer to a valid Budgettypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBudgettypevaluesFromValue(v string) (Budgettypevalues, error) {
	ev := Budgettypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Budgettypevalues: valid values are %v", v, AllowedBudgettypevaluesEnumValues)
}



// AssertBudgettypevaluesRequired checks if the required fields are not zero-ed
func AssertBudgettypevaluesRequired(obj Budgettypevalues) error {
	return nil
}

// AssertBudgettypevaluesConstraints checks if the values respects the defined constraints
func AssertBudgettypevaluesConstraints(obj Budgettypevalues) error {
	return nil
}
