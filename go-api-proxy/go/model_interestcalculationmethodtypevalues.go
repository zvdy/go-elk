// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Interestcalculationmethodtypevalues : >  * `Simple` - Calculation method by which interest is calculated on the original principal only. Accumulated interest from prior periods is not used in calculations for the following periods. (ISO20022)   * `Compounding` - Calculation method by which interest is calculated each period on the original principal and all interest accumulated during past periods. (ISO20022)  
type Interestcalculationmethodtypevalues string

// List of Interestcalculationmethodtypevalues
const (
	SIMPLE Interestcalculationmethodtypevalues = "Simple"
	COMPOUNDING Interestcalculationmethodtypevalues = "Compounding"
)

// AllowedInterestcalculationmethodtypevaluesEnumValues is all the allowed values of Interestcalculationmethodtypevalues enum
var AllowedInterestcalculationmethodtypevaluesEnumValues = []Interestcalculationmethodtypevalues{
	"Simple",
	"Compounding",
}

// validInterestcalculationmethodtypevaluesEnumValue provides a map of Interestcalculationmethodtypevaluess for fast verification of use input
var validInterestcalculationmethodtypevaluesEnumValues = map[Interestcalculationmethodtypevalues]struct{}{
	"Simple": {},
	"Compounding": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Interestcalculationmethodtypevalues) IsValid() bool {
	_, ok := validInterestcalculationmethodtypevaluesEnumValues[v]
	return ok
}

// NewInterestcalculationmethodtypevaluesFromValue returns a pointer to a valid Interestcalculationmethodtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterestcalculationmethodtypevaluesFromValue(v string) (Interestcalculationmethodtypevalues, error) {
	ev := Interestcalculationmethodtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Interestcalculationmethodtypevalues: valid values are %v", v, AllowedInterestcalculationmethodtypevaluesEnumValues)
}



// AssertInterestcalculationmethodtypevaluesRequired checks if the required fields are not zero-ed
func AssertInterestcalculationmethodtypevaluesRequired(obj Interestcalculationmethodtypevalues) error {
	return nil
}

// AssertInterestcalculationmethodtypevaluesConstraints checks if the values respects the defined constraints
func AssertInterestcalculationmethodtypevaluesConstraints(obj Interestcalculationmethodtypevalues) error {
	return nil
}
