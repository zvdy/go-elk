// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Withdrawaltypevalues : >  * `CashWithdrawal` -   * `SecurityWithdrawal` -   
type Withdrawaltypevalues string

// List of Withdrawaltypevalues
const (
	CASH_WITHDRAWAL Withdrawaltypevalues = "CashWithdrawal"
	SECURITY_WITHDRAWAL Withdrawaltypevalues = "SecurityWithdrawal"
)

// AllowedWithdrawaltypevaluesEnumValues is all the allowed values of Withdrawaltypevalues enum
var AllowedWithdrawaltypevaluesEnumValues = []Withdrawaltypevalues{
	"CashWithdrawal",
	"SecurityWithdrawal",
}

// validWithdrawaltypevaluesEnumValue provides a map of Withdrawaltypevaluess for fast verification of use input
var validWithdrawaltypevaluesEnumValues = map[Withdrawaltypevalues]struct{}{
	"CashWithdrawal": {},
	"SecurityWithdrawal": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Withdrawaltypevalues) IsValid() bool {
	_, ok := validWithdrawaltypevaluesEnumValues[v]
	return ok
}

// NewWithdrawaltypevaluesFromValue returns a pointer to a valid Withdrawaltypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWithdrawaltypevaluesFromValue(v string) (Withdrawaltypevalues, error) {
	ev := Withdrawaltypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Withdrawaltypevalues: valid values are %v", v, AllowedWithdrawaltypevaluesEnumValues)
}



// AssertWithdrawaltypevaluesRequired checks if the required fields are not zero-ed
func AssertWithdrawaltypevaluesRequired(obj Withdrawaltypevalues) error {
	return nil
}

// AssertWithdrawaltypevaluesConstraints checks if the values respects the defined constraints
func AssertWithdrawaltypevaluesConstraints(obj Withdrawaltypevalues) error {
	return nil
}
