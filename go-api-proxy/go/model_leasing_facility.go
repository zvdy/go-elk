// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// LeasingFacility - Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility  within Leasing.  Example: Perform the scheduled (e.g. statements, standing orders) and ad-hoc/requested (e.g. balance inquiries, fund transfers) fulfillment tasks for a customer current account facility.
type LeasingFacility struct {

	LeasingFacilityParameterType Featuretypevalues `json:"LeasingFacilityParameterType,omitempty"`

	LeasingFacilitySelectedOption Feature `json:"LeasingFacilitySelectedOption,omitempty"`

	LeasingFacilityType Loanproducttypevalues `json:"LeasingFacilityType,omitempty"`

	LeasingFacilityReference Leasearrangement `json:"LeasingFacilityReference,omitempty"`

	LeasingFacilitySchedule Schedule `json:"LeasingFacilitySchedule,omitempty"`

	LeasingFacilityStatus Status `json:"LeasingFacilityStatus,omitempty"`

	LeasingFacilityCurrency Currencycode `json:"LeasingFacilityCurrency,omitempty"`

	LeasingFacilityRegulationReference Regulation `json:"LeasingFacilityRegulationReference,omitempty"`

	LeasingFacilityRegulationType Rulesettypevalues `json:"LeasingFacilityRegulationType,omitempty"`

	LeasingFacilityJurisdiction Jurisdiction `json:"LeasingFacilityJurisdiction,omitempty"`

	// The financial accounting unit into which the financial events, with regard to the origination and fulfillment of the agreement in the context of Leasing Arrangement, are entered.
	LeasingFacilityBookingLocation string `json:"LeasingFacilityBookingLocation,omitempty"`

	LeasingFacilityAccountType Accounttypevalues `json:"LeasingFacilityAccountType,omitempty"`

	LeasingFacilityAccountReference Account `json:"LeasingFacilityAccountReference,omitempty"`

	LeasingFacilityProductType Obproducttypevalues `json:"LeasingFacilityProductType,omitempty"`

	LeasingFacilityProductMarketingStateID Identifier `json:"LeasingFacilityProductMarketingStateID,omitempty"`

	LeasingFacilityProductID Identifier `json:"LeasingFacilityProductID,omitempty"`

	LeasingFacilityProductName Name `json:"LeasingFacilityProductName,omitempty"`

	LeasingFacilitySecondaryProductID Identifier `json:"LeasingFacilitySecondaryProductID,omitempty"`
}

// AssertLeasingFacilityRequired checks if the required fields are not zero-ed
func AssertLeasingFacilityRequired(obj LeasingFacility) error {
	if err := AssertFeatureRequired(obj.LeasingFacilitySelectedOption); err != nil {
		return err
	}
	if err := AssertLeasearrangementRequired(obj.LeasingFacilityReference); err != nil {
		return err
	}
	if err := AssertScheduleRequired(obj.LeasingFacilitySchedule); err != nil {
		return err
	}
	if err := AssertStatusRequired(obj.LeasingFacilityStatus); err != nil {
		return err
	}
	if err := AssertCurrencycodeRequired(obj.LeasingFacilityCurrency); err != nil {
		return err
	}
	if err := AssertRegulationRequired(obj.LeasingFacilityRegulationReference); err != nil {
		return err
	}
	if err := AssertJurisdictionRequired(obj.LeasingFacilityJurisdiction); err != nil {
		return err
	}
	if err := AssertAccountRequired(obj.LeasingFacilityAccountReference); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.LeasingFacilityProductMarketingStateID); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.LeasingFacilityProductID); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.LeasingFacilityProductName); err != nil {
		return err
	}
	if err := AssertIdentifierRequired(obj.LeasingFacilitySecondaryProductID); err != nil {
		return err
	}
	return nil
}

// AssertLeasingFacilityConstraints checks if the values respects the defined constraints
func AssertLeasingFacilityConstraints(obj LeasingFacility) error {
	if err := AssertFeatureConstraints(obj.LeasingFacilitySelectedOption); err != nil {
		return err
	}
	if err := AssertLeasearrangementConstraints(obj.LeasingFacilityReference); err != nil {
		return err
	}
	if err := AssertScheduleConstraints(obj.LeasingFacilitySchedule); err != nil {
		return err
	}
	if err := AssertStatusConstraints(obj.LeasingFacilityStatus); err != nil {
		return err
	}
	if err := AssertCurrencycodeConstraints(obj.LeasingFacilityCurrency); err != nil {
		return err
	}
	if err := AssertRegulationConstraints(obj.LeasingFacilityRegulationReference); err != nil {
		return err
	}
	if err := AssertJurisdictionConstraints(obj.LeasingFacilityJurisdiction); err != nil {
		return err
	}
	if err := AssertAccountConstraints(obj.LeasingFacilityAccountReference); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.LeasingFacilityProductMarketingStateID); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.LeasingFacilityProductID); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.LeasingFacilityProductName); err != nil {
		return err
	}
	if err := AssertIdentifierConstraints(obj.LeasingFacilitySecondaryProductID); err != nil {
		return err
	}
	return nil
}
