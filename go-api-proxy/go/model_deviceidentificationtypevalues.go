// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Deviceidentificationtypevalues : >  * `IMEI` - International Mobile Equipment Identity.  * `Serialnumber` - Device serial number.  * `Secureelementidentification` - Secure element ID.  * `Othernational` - Other nationally assigned code.  * `Otherprivate` - Other privately assigned code.  
type Deviceidentificationtypevalues string

// List of Deviceidentificationtypevalues
const (
	IMEI Deviceidentificationtypevalues = "IMEI"
	SERIALNUMBER Deviceidentificationtypevalues = "Serialnumber"
	SECUREELEMENTIDENTIFICATION Deviceidentificationtypevalues = "Secureelementidentification"
	OTHERNATIONAL Deviceidentificationtypevalues = "Othernational"
	OTHERPRIVATE Deviceidentificationtypevalues = "Otherprivate"
)

// AllowedDeviceidentificationtypevaluesEnumValues is all the allowed values of Deviceidentificationtypevalues enum
var AllowedDeviceidentificationtypevaluesEnumValues = []Deviceidentificationtypevalues{
	"IMEI",
	"Serialnumber",
	"Secureelementidentification",
	"Othernational",
	"Otherprivate",
}

// validDeviceidentificationtypevaluesEnumValue provides a map of Deviceidentificationtypevaluess for fast verification of use input
var validDeviceidentificationtypevaluesEnumValues = map[Deviceidentificationtypevalues]struct{}{
	"IMEI": {},
	"Serialnumber": {},
	"Secureelementidentification": {},
	"Othernational": {},
	"Otherprivate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Deviceidentificationtypevalues) IsValid() bool {
	_, ok := validDeviceidentificationtypevaluesEnumValues[v]
	return ok
}

// NewDeviceidentificationtypevaluesFromValue returns a pointer to a valid Deviceidentificationtypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceidentificationtypevaluesFromValue(v string) (Deviceidentificationtypevalues, error) {
	ev := Deviceidentificationtypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Deviceidentificationtypevalues: valid values are %v", v, AllowedDeviceidentificationtypevaluesEnumValues)
}



// AssertDeviceidentificationtypevaluesRequired checks if the required fields are not zero-ed
func AssertDeviceidentificationtypevaluesRequired(obj Deviceidentificationtypevalues) error {
	return nil
}

// AssertDeviceidentificationtypevaluesConstraints checks if the values respects the defined constraints
func AssertDeviceidentificationtypevaluesConstraints(obj Deviceidentificationtypevalues) error {
	return nil
}
