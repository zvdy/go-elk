// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi




// Device - Reference to the device instance in Issued Device Administration
type Device struct {

	DeviceIdentification Identifier `json:"DeviceIdentification,omitempty"`

	DeviceType Devicetypevalues `json:"DeviceType,omitempty"`

	DeviceProperty Text `json:"DeviceProperty,omitempty"`

	DeviceElement Text `json:"DeviceElement,omitempty"`

	DeviceStatus Status `json:"DeviceStatus,omitempty"`

	// 
	DeviceVersion float64 `json:"DeviceVersion,omitempty"`

	DeviceDateTime Datetime `json:"DeviceDateTime,omitempty"`

	DeviceDescription Text `json:"DeviceDescription,omitempty"`

	DeviceName Name `json:"DeviceName,omitempty"`

	DeviceLanguage Text `json:"DeviceLanguage,omitempty"`

	DevicePhoneNumber Text `json:"DevicePhoneNumber,omitempty"`

	DeviceLocation Location `json:"DeviceLocation,omitempty"`

	DeviceManufacturer Text `json:"DeviceManufacturer,omitempty"`

	DeviceCountry Country `json:"DeviceCountry,omitempty"`

	DeviceAddress Address `json:"DeviceAddress,omitempty"`

	DeviceAddressType Addresstypevalues `json:"DeviceAddressType,omitempty"`

	DeviceOperatingSystem Deviceoperatingsystemtypevalues `json:"DeviceOperatingSystem,omitempty"`

	DeviceIdentificationType Deviceidentificationtypevalues `json:"DeviceIdentificationType,omitempty"`
}

// AssertDeviceRequired checks if the required fields are not zero-ed
func AssertDeviceRequired(obj Device) error {
	if err := AssertIdentifierRequired(obj.DeviceIdentification); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DeviceProperty); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DeviceElement); err != nil {
		return err
	}
	if err := AssertStatusRequired(obj.DeviceStatus); err != nil {
		return err
	}
	if err := AssertDatetimeRequired(obj.DeviceDateTime); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DeviceDescription); err != nil {
		return err
	}
	if err := AssertNameRequired(obj.DeviceName); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DeviceLanguage); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DevicePhoneNumber); err != nil {
		return err
	}
	if err := AssertLocationRequired(obj.DeviceLocation); err != nil {
		return err
	}
	if err := AssertTextRequired(obj.DeviceManufacturer); err != nil {
		return err
	}
	if err := AssertCountryRequired(obj.DeviceCountry); err != nil {
		return err
	}
	if err := AssertAddressRequired(obj.DeviceAddress); err != nil {
		return err
	}
	return nil
}

// AssertDeviceConstraints checks if the values respects the defined constraints
func AssertDeviceConstraints(obj Device) error {
	if err := AssertIdentifierConstraints(obj.DeviceIdentification); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DeviceProperty); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DeviceElement); err != nil {
		return err
	}
	if err := AssertStatusConstraints(obj.DeviceStatus); err != nil {
		return err
	}
	if err := AssertDatetimeConstraints(obj.DeviceDateTime); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DeviceDescription); err != nil {
		return err
	}
	if err := AssertNameConstraints(obj.DeviceName); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DeviceLanguage); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DevicePhoneNumber); err != nil {
		return err
	}
	if err := AssertLocationConstraints(obj.DeviceLocation); err != nil {
		return err
	}
	if err := AssertTextConstraints(obj.DeviceManufacturer); err != nil {
		return err
	}
	if err := AssertCountryConstraints(obj.DeviceCountry); err != nil {
		return err
	}
	if err := AssertAddressConstraints(obj.DeviceAddress); err != nil {
		return err
	}
	return nil
}
