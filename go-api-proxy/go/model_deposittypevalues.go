// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Deposittypevalues : >  * `CashDeposit` - Amount of money representing a value paid by a debtor to an agent bank. (ISO20022)  * `SecurityDeposit` -   * `PawnDeposit` -   * `Call/NoticeDeposit` -   * `FixedTermDeposit` -   * `DemandDeposit` - A demand deposit account is essentially a checking account in which you can withdraw funds at any time. (Investopedia) https://www.investopedia.com/terms/d/demanddeposit.asp#:~:text=our%20editorial%20policies-,What%20Is%20a%20Demand%20Deposit%3F,are%20common%20types%20of%20DDAs.  * `TimeDeposit` - Time deposits are those with a fixed time and usually pay a fixed interest rate (Investopedia)  * `CardDeposit` -   
type Deposittypevalues string

// List of Deposittypevalues
const (
	CASH_DEPOSIT Deposittypevalues = "CashDeposit"
	SECURITY_DEPOSIT Deposittypevalues = "SecurityDeposit"
	PAWN_DEPOSIT Deposittypevalues = "PawnDeposit"
	CALL_NOTICE_DEPOSIT Deposittypevalues = "Call/NoticeDeposit"
	FIXED_TERM_DEPOSIT Deposittypevalues = "FixedTermDeposit"
	DEMAND_DEPOSIT Deposittypevalues = "DemandDeposit"
	TIME_DEPOSIT Deposittypevalues = "TimeDeposit"
	CARD_DEPOSIT Deposittypevalues = "CardDeposit"
)

// AllowedDeposittypevaluesEnumValues is all the allowed values of Deposittypevalues enum
var AllowedDeposittypevaluesEnumValues = []Deposittypevalues{
	"CashDeposit",
	"SecurityDeposit",
	"PawnDeposit",
	"Call/NoticeDeposit",
	"FixedTermDeposit",
	"DemandDeposit",
	"TimeDeposit",
	"CardDeposit",
}

// validDeposittypevaluesEnumValue provides a map of Deposittypevaluess for fast verification of use input
var validDeposittypevaluesEnumValues = map[Deposittypevalues]struct{}{
	"CashDeposit": {},
	"SecurityDeposit": {},
	"PawnDeposit": {},
	"Call/NoticeDeposit": {},
	"FixedTermDeposit": {},
	"DemandDeposit": {},
	"TimeDeposit": {},
	"CardDeposit": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Deposittypevalues) IsValid() bool {
	_, ok := validDeposittypevaluesEnumValues[v]
	return ok
}

// NewDeposittypevaluesFromValue returns a pointer to a valid Deposittypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeposittypevaluesFromValue(v string) (Deposittypevalues, error) {
	ev := Deposittypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Deposittypevalues: valid values are %v", v, AllowedDeposittypevaluesEnumValues)
}



// AssertDeposittypevaluesRequired checks if the required fields are not zero-ed
func AssertDeposittypevaluesRequired(obj Deposittypevalues) error {
	return nil
}

// AssertDeposittypevaluesConstraints checks if the values respects the defined constraints
func AssertDeposittypevaluesConstraints(obj Deposittypevalues) error {
	return nil
}
