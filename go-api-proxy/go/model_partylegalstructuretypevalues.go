// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Partylegalstructuretypevalues : >  * `Individual` -   * `CommunityInterestCompany` -   * `CharitableIncorporatedOrganisation` -   * `Co-Operative` -   * `Charity` -   * `GeneralPartnership` -   * `LimitedLiabilityPartnership` -   * `ScottishLimitedPartnership` -   * `LimitedPartnership` -   * `PrivateLimitedCompany` -   * `PublicLimitedCompany` -   * `Sole(SoleTrader)` -   
type Partylegalstructuretypevalues string

// List of Partylegalstructuretypevalues
const (
	INDIVIDUAL Partylegalstructuretypevalues = "Individual"
	COMMUNITY_INTEREST_COMPANY Partylegalstructuretypevalues = "CommunityInterestCompany"
	CHARITABLE_INCORPORATED_ORGANISATION Partylegalstructuretypevalues = "CharitableIncorporatedOrganisation"
	CO_OPERATIVE Partylegalstructuretypevalues = "Co-Operative"
	CHARITY Partylegalstructuretypevalues = "Charity"
	GENERAL_PARTNERSHIP Partylegalstructuretypevalues = "GeneralPartnership"
	LIMITED_LIABILITY_PARTNERSHIP Partylegalstructuretypevalues = "LimitedLiabilityPartnership"
	SCOTTISH_LIMITED_PARTNERSHIP Partylegalstructuretypevalues = "ScottishLimitedPartnership"
	LIMITED_PARTNERSHIP Partylegalstructuretypevalues = "LimitedPartnership"
	PRIVATE_LIMITED_COMPANY Partylegalstructuretypevalues = "PrivateLimitedCompany"
	PUBLIC_LIMITED_COMPANY Partylegalstructuretypevalues = "PublicLimitedCompany"
	SOLE_SOLE_TRADER Partylegalstructuretypevalues = "Sole(SoleTrader)"
)

// AllowedPartylegalstructuretypevaluesEnumValues is all the allowed values of Partylegalstructuretypevalues enum
var AllowedPartylegalstructuretypevaluesEnumValues = []Partylegalstructuretypevalues{
	"Individual",
	"CommunityInterestCompany",
	"CharitableIncorporatedOrganisation",
	"Co-Operative",
	"Charity",
	"GeneralPartnership",
	"LimitedLiabilityPartnership",
	"ScottishLimitedPartnership",
	"LimitedPartnership",
	"PrivateLimitedCompany",
	"PublicLimitedCompany",
	"Sole(SoleTrader)",
}

// validPartylegalstructuretypevaluesEnumValue provides a map of Partylegalstructuretypevaluess for fast verification of use input
var validPartylegalstructuretypevaluesEnumValues = map[Partylegalstructuretypevalues]struct{}{
	"Individual": {},
	"CommunityInterestCompany": {},
	"CharitableIncorporatedOrganisation": {},
	"Co-Operative": {},
	"Charity": {},
	"GeneralPartnership": {},
	"LimitedLiabilityPartnership": {},
	"ScottishLimitedPartnership": {},
	"LimitedPartnership": {},
	"PrivateLimitedCompany": {},
	"PublicLimitedCompany": {},
	"Sole(SoleTrader)": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Partylegalstructuretypevalues) IsValid() bool {
	_, ok := validPartylegalstructuretypevaluesEnumValues[v]
	return ok
}

// NewPartylegalstructuretypevaluesFromValue returns a pointer to a valid Partylegalstructuretypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartylegalstructuretypevaluesFromValue(v string) (Partylegalstructuretypevalues, error) {
	ev := Partylegalstructuretypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Partylegalstructuretypevalues: valid values are %v", v, AllowedPartylegalstructuretypevaluesEnumValues)
}



// AssertPartylegalstructuretypevaluesRequired checks if the required fields are not zero-ed
func AssertPartylegalstructuretypevaluesRequired(obj Partylegalstructuretypevalues) error {
	return nil
}

// AssertPartylegalstructuretypevaluesConstraints checks if the values respects the defined constraints
func AssertPartylegalstructuretypevaluesConstraints(obj Partylegalstructuretypevalues) error {
	return nil
}
