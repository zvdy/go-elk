// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Paymentdatetimetypevalues : >  * `Requestedexecutiondate` - Date at which the initiating party requests the clearing agent to process the payment. ISO20022 Usage: This is the date on which the debtor's account is to be debited. If payment by cheque, the date when the cheque must be generated by the bank.   * `Acceptancedatetime` - Date and time at which all processing conditions for execution of the payment are met and adequate financial cover is available at the account servicing agent. ISO20022  * `Creationdate` - Date and time at which the payment execution was created by the instructing agent. ISO20022  * `Valuedate` - Date on which a payment must be executed (ISO20022)  * `Duedate` - Due date for the payment. (ISO20022)  * `Expirydate` -   
type Paymentdatetimetypevalues string

// List of Paymentdatetimetypevalues
const (
	REQUESTEDEXECUTIONDATE Paymentdatetimetypevalues = "Requestedexecutiondate"
	ACCEPTANCEDATETIME Paymentdatetimetypevalues = "Acceptancedatetime"
	CREATIONDATE Paymentdatetimetypevalues = "Creationdate"
	VALUEDATE Paymentdatetimetypevalues = "Valuedate"
	DUEDATE Paymentdatetimetypevalues = "Duedate"
	EXPIRYDATE Paymentdatetimetypevalues = "Expirydate"
)

// AllowedPaymentdatetimetypevaluesEnumValues is all the allowed values of Paymentdatetimetypevalues enum
var AllowedPaymentdatetimetypevaluesEnumValues = []Paymentdatetimetypevalues{
	"Requestedexecutiondate",
	"Acceptancedatetime",
	"Creationdate",
	"Valuedate",
	"Duedate",
	"Expirydate",
}

// validPaymentdatetimetypevaluesEnumValue provides a map of Paymentdatetimetypevaluess for fast verification of use input
var validPaymentdatetimetypevaluesEnumValues = map[Paymentdatetimetypevalues]struct{}{
	"Requestedexecutiondate": {},
	"Acceptancedatetime": {},
	"Creationdate": {},
	"Valuedate": {},
	"Duedate": {},
	"Expirydate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Paymentdatetimetypevalues) IsValid() bool {
	_, ok := validPaymentdatetimetypevaluesEnumValues[v]
	return ok
}

// NewPaymentdatetimetypevaluesFromValue returns a pointer to a valid Paymentdatetimetypevalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentdatetimetypevaluesFromValue(v string) (Paymentdatetimetypevalues, error) {
	ev := Paymentdatetimetypevalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Paymentdatetimetypevalues: valid values are %v", v, AllowedPaymentdatetimetypevaluesEnumValues)
}



// AssertPaymentdatetimetypevaluesRequired checks if the required fields are not zero-ed
func AssertPaymentdatetimetypevaluesRequired(obj Paymentdatetimetypevalues) error {
	return nil
}

// AssertPaymentdatetimetypevaluesConstraints checks if the values respects the defined constraints
func AssertPaymentdatetimetypevaluesConstraints(obj Paymentdatetimetypevalues) error {
	return nil
}
