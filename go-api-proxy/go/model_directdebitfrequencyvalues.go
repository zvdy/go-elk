// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Leasing
 *
 * The leasing products enables customers to finance equipment purchases using the leased item as collateral when necessary
 *
 * API version: 12.0.0
 */

package openapi


import (
	"fmt"
)


// Directdebitfrequencyvalues : >  * `Annual` - Event takes place every year or once a year.  * `Monthly` - Event takes place every month or once a month.  * `Quarterly` - Event takes place every three months or four times a year.  * `Weekly` - Event takes place once a week.  * `Daily` - Event takes place every day.  * `Adhoc` - Event takes place on request or as necessary.  * `Fortnightly` - Event takes place every two weeks.  * `Hourly` - Event takes place every hours.  * `Half-Yearly` -   
type Directdebitfrequencyvalues string

// List of Directdebitfrequencyvalues
const (
	ANNUAL Directdebitfrequencyvalues = "Annual"
	MONTHLY Directdebitfrequencyvalues = "Monthly"
	QUARTERLY Directdebitfrequencyvalues = "Quarterly"
	WEEKLY Directdebitfrequencyvalues = "Weekly"
	DAILY Directdebitfrequencyvalues = "Daily"
	ADHOC Directdebitfrequencyvalues = "Adhoc"
	FORTNIGHTLY Directdebitfrequencyvalues = "Fortnightly"
	HOURLY Directdebitfrequencyvalues = "Hourly"
	HALF_YEARLY Directdebitfrequencyvalues = "Half-Yearly"
)

// AllowedDirectdebitfrequencyvaluesEnumValues is all the allowed values of Directdebitfrequencyvalues enum
var AllowedDirectdebitfrequencyvaluesEnumValues = []Directdebitfrequencyvalues{
	"Annual",
	"Monthly",
	"Quarterly",
	"Weekly",
	"Daily",
	"Adhoc",
	"Fortnightly",
	"Hourly",
	"Half-Yearly",
}

// validDirectdebitfrequencyvaluesEnumValue provides a map of Directdebitfrequencyvaluess for fast verification of use input
var validDirectdebitfrequencyvaluesEnumValues = map[Directdebitfrequencyvalues]struct{}{
	"Annual": {},
	"Monthly": {},
	"Quarterly": {},
	"Weekly": {},
	"Daily": {},
	"Adhoc": {},
	"Fortnightly": {},
	"Hourly": {},
	"Half-Yearly": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Directdebitfrequencyvalues) IsValid() bool {
	_, ok := validDirectdebitfrequencyvaluesEnumValues[v]
	return ok
}

// NewDirectdebitfrequencyvaluesFromValue returns a pointer to a valid Directdebitfrequencyvalues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectdebitfrequencyvaluesFromValue(v string) (Directdebitfrequencyvalues, error) {
	ev := Directdebitfrequencyvalues(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Directdebitfrequencyvalues: valid values are %v", v, AllowedDirectdebitfrequencyvaluesEnumValues)
}



// AssertDirectdebitfrequencyvaluesRequired checks if the required fields are not zero-ed
func AssertDirectdebitfrequencyvaluesRequired(obj Directdebitfrequencyvalues) error {
	return nil
}

// AssertDirectdebitfrequencyvaluesConstraints checks if the values respects the defined constraints
func AssertDirectdebitfrequencyvaluesConstraints(obj Directdebitfrequencyvalues) error {
	return nil
}
